I"Î<h3 class="lead mt-5" id="las-funciones-lambda-son-funciones-an√≥nimas-es-decir-que-no-tienen-nombre-las-funciones-lambda-se-definen-en-una-sola-l√≠nea">Las funciones lambda son funciones an√≥nimas, es decir que no tienen nombre. Las funciones lambda se definen en una sola l√≠nea.</h3>

<h3 class="lead my-3" id="lambda-se-utiliza-para-simplificar-todav√≠a-m√°s-las-funciones-peque√±as-para-funciones-complejas-siempre-se-utiliza-la-sintaxis-normal">Lambda se utiliza para simplificar todav√≠a m√°s las funciones peque√±as, para funciones complejas siempre se utiliza la sintaxis normal.</h3>

<h3 class="lead mb-5" id="las-funciones-lambda-no-se-definen-con-la-palabra-clave-def-como-las-funciones-normales-se-definen-con-la-palabra-clave-lambda">Las funciones lambda no se definen con la palabra clave <code class="language-plaintext highlighter-rouge">def</code> como las funciones normales, se definen con la palabra clave <code class="language-plaintext highlighter-rouge">lambda</code>.</h3>

<blockquote class="blockquote">
  <p class="mb-0">"Las lambdas de Python son s√≥lo una notaci√≥n abreviada si eres demasiado perezoso para definir una funci√≥n"..</p>
  <footer class="blockquote-footer">Documentaci√≥n oficial <cite title="Source Title">Documentaci√≥n oficial</cite></footer>
</blockquote>

<h2 id="ejemplo-de-funci√≥n-lambda">Ejemplo de funci√≥n lambda</h2>

<p>Funci√≥n lambda que recoge el nombre y el apellido.
En el siguiente ejemplo definimos la funci√≥n con la palabra clave <code class="language-plaintext highlighter-rouge">lambda</code> a√±adimos sus par√°metros separados por comas, en este caso first y last y despu√©s de los dos puntos <code class="language-plaintext highlighter-rouge">:</code> viene la expresi√≥n de la funci√≥n en este caso recogemos los dos par√°metros en una cadena, sin necesidad de escribir <code class="language-plaintext highlighter-rouge">return</code>.</p>

<p>Para poder utilizar la funci√≥n hay que guardarla en una variable en este caso la variable full_name.</p>

<p>Ahora s√≠ ya puedes llamar a la funci√≥n como si de una funci√≥n normal se tratara.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_name</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">:</span> <span class="s">f'</span><span class="si">{</span><span class="n">first</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">last</span><span class="si">}</span><span class="s">'</span>


<span class="k">print</span><span class="p">(</span><span class="n">full_name</span><span class="p">(</span><span class="s">'Marcel'</span><span class="p">,</span> <span class="s">'Reig'</span><span class="p">))</span>

<span class="c1"># Output: Marcel Reig
</span></code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
:ET