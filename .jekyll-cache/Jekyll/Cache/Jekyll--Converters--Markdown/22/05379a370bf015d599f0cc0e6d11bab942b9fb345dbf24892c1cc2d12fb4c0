I"ñ<h3 class="lead mt-5" id="en-una-funci√≥n-t√≠pica-tenemos-el-nombre-de-la-funci√≥n-y-unos-par√°metros-en-la-llamada-a-la-funci√≥n-se-espera-que-haya-el-mismo-n√∫mero-de-argumentos-que-de-par√°metros-y-si-no-es-as√≠-dar√°-un-error">En una funci√≥n t√≠pica tenemos el nombre de la funci√≥n y unos par√°metros, en la llamada a la funci√≥n se espera que haya el mismo n√∫mero de argumentos que de par√°metros, y si no es as√≠ dar√° un error.</h3>

<h3 class="lead my-5" id="los-args-y-kwargs-en-python-nos-permiten-pasar-un-n√∫mero-variable-de-argumentos-a-una-funci√≥n">Los <code class="language-plaintext highlighter-rouge">*args</code> y <code class="language-plaintext highlighter-rouge">**kwargs</code> en Python nos permiten pasar un n√∫mero variable de argumentos a una funci√≥n.</h3>

<div class="alert alert-info" role="alert">
<p><i class="fas fa-sticky-note"></i> Nota:</p>
 <p>Al definir una funci√≥n los valores que se reciben se denominan <b>par√°metros</b>, pero durante la llamada los valores que se env√≠an se denominan <b>argumentos</b>.</p>
</div>

<h2 id="funci√≥n-con-el-mismo-n√∫mero-de-par√°metros-y-argumentos">Funci√≥n con el mismo n√∫mero de par√°metros y argumentos.</h2>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">suma</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Suma:"</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="o">+</span><span class="n">z</span><span class="p">)</span>


<span class="n">suma</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1"># Return: 17
</span></code></pre></div></div>
<h2 id="error-al-enviar-un-n√∫mero-distinto-de-argumentos-que-de-par√°metros">Error al enviar un n√∫mero distinto de argumentos que de par√°metros:</h2>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sumar_numeros</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Suma:"</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="o">+</span><span class="n">z</span><span class="p">)</span>

    
<span class="n">sumar_numeros</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>

<span class="c1"># TypeError: suma() takes 3 positional arguments but 7 were given
</span></code></pre></div></div>
<h2 id="funci√≥n-con-distinto-n√∫mero-de-par√°metros-y-argumentos-utilizando-args">Funci√≥n con distinto n√∫mero de par√°metros y argumentos utilizando <code class="language-plaintext highlighter-rouge">*args</code>.</h2>

<p>El simbolo asterisco <code class="language-plaintext highlighter-rouge">*</code> nos permite hacer la llamada a la funci√≥n con sin importar el n√∫mero de argumentos. Los argumentos se almacenan en una tupla.</p>

<p>El nombre del par√°metro num no importa pudes utilizar args o lo que quieras, lo que hace el trabajo es el asterisco.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sumar_numeros</span><span class="p">(</span><span class="o">*</span><span class="n">num</span><span class="p">):</span>
    <span class="n">suma</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">num</span><span class="p">:</span>
        <span class="n">suma</span> <span class="o">=</span> <span class="n">suma</span> <span class="o">+</span> <span class="n">n</span>

    <span class="k">print</span><span class="p">((</span><span class="s">"Suma:"</span><span class="p">,</span> <span class="n">suma</span><span class="p">))</span>


<span class="n">sumar_numeros</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="c1"># Output: ('Suma:', 6)
</span>
<span class="n">sumar_numeros</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
<span class="c1"># Output: ('Suma:', 28)
</span></code></pre></div></div>

<h2 id="kwargs-en-python"><code class="language-plaintext highlighter-rouge">*kwargs</code> en Python</h2>

<p>Se utiliza para trabajar con argumentos con palabras clave. Los argumentos se almacenan en un diccionario.</p>

<p>El nombre kwargs es convenci√≥n, no es una regla puedes llamarlos como quieras.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">empleado</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="k">print</span><span class="p">(</span><span class="s">f"</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s"> : </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>


<span class="n">empleado</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'Marcel'</span><span class="p">,</span> <span class="n">role</span><span class="o">=</span><span class="s">'Python Hacker'</span><span class="p">,</span> <span class="n">salary</span><span class="o">=</span><span class="s">'50k'</span><span class="p">)</span>

<span class="c1"># Output: 
</span><span class="s">'''
name : Marcel
role : Python Hacker
salary : 50k
'''</span>
</code></pre></div></div>
:ET