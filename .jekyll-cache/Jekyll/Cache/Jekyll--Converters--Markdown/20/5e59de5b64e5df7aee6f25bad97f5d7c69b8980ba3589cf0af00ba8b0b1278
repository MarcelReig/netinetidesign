I"$S<h3 class="lead" id="python-es-un-lenguaje-de-propósito-general-con-una-sintaxis-limpia-y-sencilla-por-lo-que-es-una-buena-elección-para-aprender-a-programar">Python es un lenguaje de propósito general con una sintaxis limpia y sencilla, por lo que es una buena elección para aprender a programar.</h3>

<h3 class="lead" id="python-fue-creado-en-los-90-por-guido-van-rossum-su-nombre-viene-de-los-humoristas-britanicos-monty-python">Python fue creado en los 90 por <a href="https://twitter.com/gvanrossum?s=20" target="\_blank">Guido van Rossum</a>, su nombre viene de los humoristas britanicos Monty Python.</h3>

<h3 class="lead mb-5" id="si-quieres-cear-aplicaciones-web-en-python-puedes-utilizar-algunso-de-sus-frameworks-django-o-flask">Si quieres cear aplicaciones web en Python puedes utilizar algunso de sus frameworks <a href="https://www.djangoproject.com/" target="\_blank">django</a> o <a href="https://flask.palletsprojects.com/en/2.0.x/" target="\_blank">Flask</a>.</h3>

<h2 id="empezar-a-programar-en-python">Empezar a programar en Python</h2>

<p><strong>Sin instalación</strong></p>

<p>La manera más fácil de probar el lenguaje es utilizar <a href="https://replit.com/" target="\_blank">replit</a> o <a href="https://www.anyfiddle.com/">anyfidle</a>, son herramientas tipo codepen pero que te permiten programar en Python.</p>

<p><strong>Con instalación</strong></p>

<p>Las herraminetas mencionadas anteriormente están bién para probar el lenguaje, pero tarde o temprano tendrás que instalar Python en tu computadora.</p>

<p>Para instalar Python ves a <a href="https://www.python.org/" target="\_blank">python.org</a> y descarga la versión de Python para tu sistema operativo.</p>

<div class="alert alert-info" role="alert">
<p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>Para instalar Python en Mac te recomiendo seguir el <a href="https://www.freecodecamp.org/news/python-version-on-mac-update/" target="_blank">tutorial de Quincy Larson</a> en freeCodeCamp.</p>
</div>

<p>Una vez instalado Python en tu computadora ya puedes abrir la terminal y escribir <code class="language-plaintext highlighter-rouge">python3</code>, esto te abrirá un interprete de Python en el que ya puedes ejecutar funciones de Python.</p>

<p><img src="/assets/images/blog/python-term.png" width="800" class="img-fluid text-center m-xl-auto" alt="python" /></p>

<div class="alert alert-info" role="alert">
 <p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>Una vez instalado Python 3 ya puedes escribir comandos de Python detrás de los tres símbolos <code>&gt;&gt;&gt;</code><br />Si quieres código coloreado y que te avise de errores instala un editor de código.</p>
</div>

<h2 id="entorno-de-programación">Entorno de programación</h2>

<p>No necesitas un IDE especializado para empezar a programar en Python, cualquier editor de código te irá bien.</p>

<p>Mi editor habitual es <a href="https://code.visualstudio.com/" target="\_blank">Visual Studio Code</a> el cual tiene una <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="\_blank">extensión para Python</a> pero de momento estoy utilizando <a href="https://www.jetbrains.com/es-es/pycharm/download/" target="\_blank">PyCharm</a> la versión <strong>Community</strong> que es gratuita y para aprender el lenguaje es muy cómodo.</p>

<h2 id="características-principales-del-lenguaje">Características principales del lenguaje</h2>

<ul>
  <li>Es un <strong>lenguaje interpretado</strong>, no compilado.</li>
  <li>Usa <strong>tipado dinámico</strong>, una variable puede tomar valores de distinto tipo.</li>
  <li>Es <strong>fuertemente tipado</strong>, el tipo no cambia de manera repentina. Para que se produzca un cambio de tipo se tiene que hacer una conversión explícita.</li>
  <li>Es <strong>multiplataforma</strong>, el mismo código funciona en macOS, Windows y Linux.</li>
</ul>

<h2 id="indentación">Indentación</h2>

<p>Python utiliza la indentación para indicar el inicio y fín de un bloque de código.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">saludar</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">):</span>
    <span class="k">return</span><span class="p">(</span><span class="s">"Hi "</span> <span class="o">+</span> <span class="n">first_name</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">last_name</span> <span class="o">+</span> <span class="s">"!"</span><span class="p">)</span> <span class="c1"># código indentado
</span><span class="k">print</span><span class="p">(</span><span class="n">saludar</span><span class="p">(</span><span class="s">"Ana"</span><span class="p">,</span> <span class="s">"Toledo"</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="comentarios">Comentarios</h2>
<p>Comentario de una línea.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Hola soy un comentario
</span></code></pre></div></div>

<p>Los comentarios de varias líneas se hacen con 3 comillas dobles o simples al inicio y al final del comentario.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""
Comentario
de varias
líneas
"""</span>
</code></pre></div></div>

<div class="alert alert-info" role="alert">
 <p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>En los siguientes ejemplos utilizaré <code># Comentarios de Python</code> para mostrar el resultado de la consola u otras aclaraciones.</p>
</div>

<h2 id="variables">Variables</h2>

<p>Las variables nos permiten guardar valores que más tarde podemos utilizar en nuestro código.
Las variables pueden guardar cualquier tipo de dato, enteros, flotantes, booleanos y cadenas o Strings, también podemos guardar listas y tuplas.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># variable que contiene un string
</span><span class="n">mascota</span> <span class="o">=</span> <span class="s">"Perro"</span>
<span class="c1"># variable que contiene un booleano
</span><span class="n">raza_peligrosa</span> <span class="o">=</span> <span class="bp">True</span>
<span class="c1"># variable que contiene un número entero
</span><span class="n">edad</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></div></div>

<h2 id="tipos-de-datos">Tipos de datos</h2>

<ul>
  <li>Booleanos</li>
  <li>Números</li>
  <li>Cadenas</li>
  <li>Listas</li>
  <li>Tuplas</li>
  <li>Diccionarios</li>
  <li>set</li>
  <li>Mutables e Inmutables</li>
</ul>

<h2 id="trabajando-con-cadenas-en-python">Trabajando con cadenas en Python</h2>

<p>Las cadenas (<code class="language-plaintext highlighter-rouge">string</code>) se crean escribiendo una una secuencia de carácteres, letras, números o símbolos entre comillas simples <code class="language-plaintext highlighter-rouge">''</code> o dobles <code class="language-plaintext highlighter-rouge">""</code>.</p>

<p>Puedes guardar un <code class="language-plaintext highlighter-rouge">string</code> en una variable del siguiente modo:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_str</span> <span class="o">=</span> <span class="s">'Fixie pug hoodie'</span>
<span class="k">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">)</span> <span class="c1"># Fixie pug hoodie
</span></code></pre></div></div>

<p>Puedes concatenar variables que contienen cadenas utilizando el operador <code class="language-plaintext highlighter-rouge">+</code> de suma:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_str1</span> <span class="o">=</span> <span class="s">'Roof'</span>
<span class="n">my_str2</span> <span class="o">=</span> <span class="s">'party'</span>
<span class="n">my_str3</span> <span class="o">=</span> <span class="s">'wolf'</span>
<span class="n">my_str4</span> <span class="o">=</span> <span class="s">'iPhone'</span>

<span class="k">print</span><span class="p">(</span><span class="n">my_str1</span> <span class="o">+</span> <span class="n">my_str2</span> <span class="o">+</span> <span class="n">my_str3</span> <span class="o">+</span> <span class="n">my_str4</span><span class="p">)</span>

<span class="c1"># RoofpartywolfiPhone
</span></code></pre></div></div>

<p>Si quieres espacios en blanco entre las cadenas tienes que añadirlos <code class="language-plaintext highlighter-rouge">" "</code>:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_str1</span> <span class="o">=</span> <span class="s">'Roof'</span>
<span class="n">my_str2</span> <span class="o">=</span> <span class="s">'party'</span>
<span class="n">my_str3</span> <span class="o">=</span> <span class="s">'wolf'</span>
<span class="n">my_str4</span> <span class="o">=</span> <span class="s">'iPhone'</span>

<span class="k">print</span><span class="p">(</span><span class="n">my_str1</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">my_str2</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">my_str3</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">my_str4</span><span class="p">)</span>

<span class="c1"># Roof party wolf iPhone
</span></code></pre></div></div>

<p><strong>f-strings</strong></p>

<p>Por suerte Python 3 cuenta con el método string interpolation que facilita mucho el formateo de strings.</p>

<p>Escribe una cadena precedida de la letra <code class="language-plaintext highlighter-rouge">f</code> te permite añadir variables dentro de una cadena.</p>

<p>Las variables se escriben entre llaves <code class="language-plaintext highlighter-rouge">{}</code>.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_str1</span> <span class="o">=</span> <span class="s">'Roof'</span>
<span class="n">my_str2</span> <span class="o">=</span> <span class="s">'party'</span>
<span class="n">my_str3</span> <span class="o">=</span> <span class="s">'wolf'</span>
<span class="n">my_str4</span> <span class="o">=</span> <span class="s">'iPhone'</span>

<span class="k">print</span><span class="p">(</span><span class="s">f'</span><span class="si">{</span><span class="n">my_str1</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">my_str2</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">my_str3</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">my_str4</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

<span class="c1"># Roof party wolf iPhone
</span></code></pre></div></div>

<div class="alert alert-info" role="alert">
<p><i class="fas fa-sticky-note"></i> Nota:</p>
 <p>Si como yo estás aprendiendo Python pero ya sabes algo de JavaScript, las <code>f-string</code> vendrían a ser a algo así como los template literals en ES6.</p>
</div>

<p><strong>Ejemplo de template literal en ES6</strong></p>

<p>En JavaScript en vez de preceder la cadena con la letra <code>f</code> utilizamos acentos graves <code>``</code> en lugar de comillas simples <code>''</code> para envolver la cadena. También se requiere del simbolo dolar <code>$</code> delante de las llaves, por lo demás es bastante similar.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">my_str1</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Roof</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">my_str2</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">party</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">my_str3</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">wolf</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">my_str4</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">iPhone</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">my_str1</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">my_str2</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">my_str3</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">my_str4</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>

<span class="c1">// "Roof party wolf iPhone"</span>
</code></pre></div></div>

<p><strong>strings multilínea</strong></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">multiline_str</span> <span class="o">=</span> <span class="s">'''Los strings multilínea
son igual que
los comentarios multilínea...'''</span>

<span class="k">print</span><span class="p">(</span><span class="n">multiline_str</span><span class="p">)</span>

<span class="s">'''
Los strings multilínea
son igual que
los comentarios multilínea...
'''</span>
</code></pre></div></div>

<p>También podemos utilizar el carácter de escape <code class="language-plaintext highlighter-rouge">\n</code> para crear saltos de línea.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">multiline_str</span> <span class="o">=</span> <span class="s">"Los strings multilínea</span><span class="se">\n</span><span class="s">son igual que</span><span class="se">\n</span><span class="s">los comentarios multilínea..."</span>

<span class="k">print</span><span class="p">(</span><span class="n">multiline_str</span><span class="p">)</span>

<span class="s">'''
Los strings multilínea
son igual que
los comentarios multilínea...
'''</span>
</code></pre></div></div>

<p><strong>Indexando strings</strong></p>

<p>Del mismo modo que los ítems de lista los carácteres de un string son indexables en un índice que empiza en 0.</p>

<table class="table table-bordered">
  <tbody>
    <tr>
      <td>T</td>
      <td>e</td>
      <td>l</td>
      <td>é</td>
      <td>f</td>
      <td>o</td>
      <td>n</td>
      <td>o</td>
      <td> </td>
      <td>m</td>
      <td>i</td>
      <td> 
      <td>c</td>
      <td>a</td>
      <td>s</td>
      <td>a</td>
    &lt;/tr&gt;
        <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>

  &lt;/tbody&gt;
&lt;/table&gt;

## Trabajando con listas en Python

Una lista es una secuencia ordenada de elementos, las listas no son inmutables, podemos añadir, eliminar, mover y cambiar items de lista a nuestro antojo.
Las listas se crean añadiendo valores entre `[ ]` corchetes.

```py
helados = ['chocolate', 'limón', 'mango']
print(helados)
# ['chocolate', 'limón', 'mango']

helados.insert(1, 'vainilla')

print(helados)
# ['chocolate', 'vainilla', 'limón', 'mango']

helados.append('pistacho')

print(helados)
# ['chocolate', 'vainilla', 'limón', 'mango', 'pistacho']

```

Podemos acceder a los valores de lista por su índice igual que en las cadenas.

```py
helados = ['chocolate', 'limón', 'mango']
print(helados[2])
# mango
```

Si no te gusta el mango siempre puedes cambiarlo por fresas silvestres asignándole otro valor a través de su índice.

```py
helados = ['chocolate', 'limón', 'mango']
helados[2] = 'fresas silvestres'
print(helados)
# ['chocolate', 'limón', 'fresas silvestres']
```

Si simplemente odias el mango y no quieres añadir ningún otro sabor, puedes utilizar el método  `.remove()` para eliminarlo de la lista.

```py
helados = ['chocolate', 'limón', 'mango']
helados.remove('mango')
print(helados) # ['chocolate', 'limón']
```

Otro método que tenemos disponible para eliminar elementos de lista en Python es `.pop()`.
Si vienes de JavaScript este método ya te sonará.
`.pop()` lo que hace es eliminar el último elemento de la lista pero no solo eso, también lo retorna por lo que podemos guardarlo en una variable.

```py
helados = ['chocolate', 'limón', 'mango']
ultimo_helado = helados.pop()
print(ultimo_helado) # mango
print(helados) # ['chocolate', 'limón']
```

También puedes utilizar la palabra clave `del` para eliminar elementos de lista.

```py
helados = ['chocolate', 'limón', 'mango']
del helados[2]
print(helados) # ['chocolate', 'limón']
```

Python nos permite crear listas de listas o listas anidadas.

```py
nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print(nested_list[0][1])  # 2

print(nested_list[1][-1])  # 6
```

Para acceder al último elemento de la lista utilizamos el indice negativo  `[-1]`.

```py
helados = ['chocolate', 'limón', 'mango']
print(helados[-1])  # mango
```

Para saber cuantos elementos tiene una lista utilizamos la función predefinida de Python `len`.

```py
helados = ['chocolate', 'limón', 'mango']
print(len(helados))  # 3
```

Para saber en que índice se encuentra un elemento en una lista utilizamos el método `.index()`.
```py
helados = ['chocolate', 'limón', 'mango']
print(helados.index('limón'))  # 1
```

El método `.sort()` ordena los ítems de lista alfabéticamente.

```py
helados = ['café', 'straciatella', 'avellana']
helados.sort()
print(helados)
#  ['avellana', 'café', 'straciatella']
```

El método `.reverse()` invierte los elementos de la lista original.

En el siguiente ejemplo hacemos uso de `.sort()` y `.reverse()` para ordenar una lista de Z a A.

```py
helados = ['café', 'straciatella', 'avellana']

helados.sort(reverse=True)

print(helados)
#  ['straciatella', 'café', 'avellana']
```
## Tuplas

## Números

**Enteros** (`int`) números sin decimales, por ejemplo `500` o `-350`.

```py
sumar_enteros = 5 + 5
print(sumar_enteros)  # 10
```
**Números con decimales** (`float`) por ejemplo `0.20` o `-34.000`.

```py
sumar_decimales = 5.50 + 0.8
print(sumar_decimales)  # 6.3
```
__Operadores aritméticos en Python:__

<table class="table table-bordered">
  <thead>
    <tr>
      <th scope="col">Operador </th>
      <th scope="col">Descripción </th>
      <th scope="col">Uso </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">+</th>
      <td>Suma</td>
      <td>5 + 5 = 10 </td>
    </tr>
    <tr>
      <th scope="row">-</th>
      <td>Resta</td>
      <td>4 - 3 = 1</td>
    </tr>
    <tr>
      <th scope="row">*</th>
      <td>Multiplicación</td>
      <td>8 * 2 = 16</td>
    </tr>
        <tr>
      <th scope="row">/</th>
      <td>División</td>
      <td>16 / 2 = 8</td>
    </tr>
    <tr>
      <th scope="row">%</th>
      <td>Módulo</td>
      <td>16 % 3 = 1</td>
    </tr>
    <tr>
      <th scope="row">**</th>
      <td>Exponente</td>
      <td>12 ** 3 = 1728</td>
    </tr>
      <tr>
      <th scope="row">//</th>
      <td>División entera</td>
      <td>18 // 5 = 3</td>
    </tr>
  </tbody>
</table>

## Condicionales

```py
es_barato = True
es_bueno = True

if es_barato and es_bueno:
    print("Toma mi dinero!")
elif es_barato and not es_bueno:
    print("Eres barato pero no eres bueno")
elif not es_barato and es_bueno:
    print("Eres bueno pero no eres barato")
else:
    print("Eres una estafa")
```

Con los condicionales en Python puedes construir cosas tan geniales como una pequeña calculadora.

```py
num1 = float(input("Introduce un número: "))
op = input("Introduce un operador: ")
num2 = float(input("Introduce el segundo número: "))

if op == '+':
    print(num1 + num2)
elif op == '-':
    print(num1 - num2)
elif op == '/':
    print(num1 / num2)
elif op == '*':
    print(num1 * num2)
else:
    print('Introduce un operador válido')
```

## Iteraciones en Python

- While
- For

## Funciones en Python

Las funciones en Python se crean mediante la instrucción `def` más el nombre de la función.

```py
def my_function(param1, param2):
    print(param1 + param2)
```

Para invocar la función escribimos el nombre de la función más paréntesis y los parámetros de la función si los tiene.
No todas las funciones tienen que tener parámetros.

```py
my_function(4, 6) # 10
```
## Funciones lambda

Las funciones normales en Python se definen con `def`.
Las funciones anonimas en Python se definen con `lambda`.

```py
# Función normal
def myfunc(x, y, z):
    result = x + y + z
    return result

print(myfunc(2, 4, 3)) # 9
```

```py
#Función lambda
result2 = lambda x, y, z: x + y + z

print(result2(2, 4, 3)) # 9
```

## Diccionarios

## Clases y objetos
</td></tr></tbody></table>
:ET