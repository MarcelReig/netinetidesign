I"‹	<h3 class="lead mt-5" id="en-una-funci√≥n-t√≠pica-tenemos-el-nombre-de-la-funci√≥n-y-unos-par√°metros-despu√©s-en-la-llamada-a-la-funci√≥n-se-espera-que-haya-el-mismo-n√∫mero-de-argumentos-que-de-par√°metros-y-si-no-es-as√≠-dar√°-un-error">En una funci√≥n t√≠pica tenemos el nombre de la funci√≥n y unos par√°metros, despu√©s en la llamada a la funci√≥n se espera que haya el mismo n√∫mero de argumentos que de par√°metros y si no es as√≠ dar√° un error.</h3>

<h3 class="lead my-5" id="los-args-y-kwargs-en-python-nos-permiten-pasar-un-n√∫mero-variable-de-argumentos-a-una-funci√≥n">Los <code class="language-plaintext highlighter-rouge">*args</code> y <code class="language-plaintext highlighter-rouge">**kwargs</code> en Python nos permiten pasar un n√∫mero variable de argumentos a una funci√≥n.</h3>

<div class="alert alert-info" role="alert">
<p><i class="fas fa-sticky-note"></i> Nota:</p>
 <p>Al definir una funci√≥n los valores que se reciben se denominan <b>par√°metros, pero durante la llamada los valores que se env√≠an se denominan argumentos.&lt;/p&gt;
&lt;/div&gt;

## Funci√≥n con el mismo n√∫mero de par√°metros y argumentos.

```py
def suma(x, y, z):
    print("Suma:", x+y+z)


suma(10, 5, 2)

# Return: 17
```
## Error al enviar un n√∫mero distinto de argumentos que de par√°metros: 
```py
def sumar_numeros(x, y, z):
    print("Suma:", x+y+z)

    
sumar_numeros(1, 2, 3, 4, 5, 6, 7)

# TypeError: suma() takes 3 positional arguments but 7 were given
```
## Funci√≥n con distinto n√∫mero de par√°metros y argumentos utilizando `*args`.

El simbolo asterisco `*` nos permite hacer la llamada a la funci√≥n con sin importar el n√∫mero de argumentos. Los argumentos se almacenan en una tupla.

El nombre del par√°metro num no importa pudes utilizar args o lo que quieras, lo que hace el trabajo es el asterisco.

```py
def sumar_numeros(*num):
    suma = 0

    for n in num:
        suma = suma + n

    print(("Suma:", suma))


sumar_numeros(1, 2, 3)
# Output: ('Suma:', 6)

sumar_numeros(1, 2, 3, 4, 5, 6, 7)
# Output: ('Suma:', 28)
```

## `*kwargs` en Python

Se utiliza para trabajar con argumentos con palabras clave. Los argumentos se almacenan en un diccionario.

El nombre kwargs es convenci√≥n, no es una regla puedes llamarlos como quieras.

```py
def empleado(**kwargs):
    for key, value in kwargs.items():
        print(f"{key} : {value}")


empleado(name='Marcel', role='Python Hacker', salary='50k')

# Output: 
'''
name : Marcel
role : Python Hacker
salary : 50k
'''
```
</b></p></div>
:ET