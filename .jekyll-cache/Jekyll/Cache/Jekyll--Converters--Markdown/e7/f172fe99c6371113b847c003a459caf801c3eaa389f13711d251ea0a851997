I"È+<p>Sintaxis para Get (Obtener el valor de un atributo): <code class="language-plaintext highlighter-rouge">objeto.par√°metro</code></p>

<p>Sintaxis para el Set (Establecer el valor de un atributo): <code class="language-plaintext highlighter-rouge">objeto.par√°metro = valor</code></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Villain</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">quote</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">quote</span> <span class="o">=</span> <span class="n">quote</span>

    <span class="k">def</span> <span class="nf">villain_says</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">f'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> dice </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">quote</span><span class="si">}</span><span class="s">'</span>


<span class="n">joker</span> <span class="o">=</span> <span class="n">Villain</span><span class="p">(</span><span class="s">'Joker'</span><span class="p">,</span> <span class="s">'Siempre hay que tener un as en la manga'</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">joker</span><span class="p">.</span><span class="n">villain_says</span><span class="p">())</span>  <span class="c1"># Getter
</span>
<span class="c1"># Output: Joker dice Siempre hay que tener un as en la manga
</span>
<span class="n">joker</span><span class="p">.</span><span class="n">quote</span> <span class="o">=</span> <span class="s">'Aprend√≠ que todo tiene su tiempo y su lugar'</span>  <span class="c1"># Setter
</span>
<span class="k">print</span><span class="p">(</span><span class="n">joker</span><span class="p">.</span><span class="n">villain_says</span><span class="p">())</span>  <span class="c1"># Getter
</span>
<span class="c1"># Output: Joker dice Aprend√≠ que todo tiene su tiempo y su lugar
</span></code></pre></div></div>

<h2 id="modificadores-de-acceso">Modificadores de acceso</h2>

<p>En Java o C++, no se permite accceder ni modificar datos de una clase sin antes haber creado una funci√≥n especifica para ello.</p>

<p>En Java o C++ tienen las palabras clave <code class="language-plaintext highlighter-rouge">public</code>, <code class="language-plaintext highlighter-rouge">private</code> y <code class="language-plaintext highlighter-rouge">protected</code> conocidas como modificadores de acceso, para controlar el acceso a los m√©todos de la clase.</p>

<p>Sin embargo Python no tiene modificadores de acceso y por defecto todos los m√©todos y variables son accesibles desde fuera, esto puede hacer que cometamos errores.</p>

<p>En cualquier caso Python tiene una convenci√≥n para imitar los modificadores de acceso.</p>
<h2 id="propiedades-y-decoradores">Propiedades y decoradores</h2>

<p>En el ejemplo anterior hemos visto como accededer, a√±adir y modificar atributos de clase con la sintaxis <code class="language-plaintext highlighter-rouge">.</code> para get y <code class="language-plaintext highlighter-rouge">=</code> para setter, pero esta no es la forma m√°s segura de hacerlo y podr√≠a llevarnos a cometer errores al crecer el programa en complegidad.</p>

<p>Aqu√≠ es donde entran los conceptos de <strong>encapsulaci√≥n</strong> y <strong>decoradores</strong> de Python.</p>

<p>La <strong>encapsulaci√≥n</strong> de manera muy resumida es exponer solo los atributos de clase que el usuario necesita. De esta manera evitamos sobreescibir alg√∫n par√°metro por error y romper la aplicaci√≥n.</p>

<p>En Java se utiliza las palabras reservadas <code class="language-plaintext highlighter-rouge">public</code> o <code class="language-plaintext highlighter-rouge">private</code> para definir si un elemento puede ser utilizado o no fuera de la clase.</p>

<p>En Python no existen modificadores de clase y todos los elementos son p√∫blicos por defecto, pero la privacidad se pueden simular con @property y setter.</p>

<p>Es convenci√≥n en Python utilizar un gui√≥n bajo delante del nombre del atributo cuando creamos atributos protegidos <code class="language-plaintext highlighter-rouge">_protectedMember</code> y dos guiones bajos delante de atributos privados <code class="language-plaintext highlighter-rouge">__privateMember</code>.</p>

<p>El gui√≥n bajo no hace nada en si mismo, es solo una convenci√≥n para dejar claro que estas creando un atributo protegido, tanto para ti como para otros desarrolladores que puedan leer tu c√≥digo en el futuro.</p>

<p>El doble gui√≥n bajo si que afecta al interprete de Python, al utilizar doble gui√≥n bajo, Python reescribe el nombre de la variable.</p>

<p>Las variables nombradas con doble gui√≥n bajo no son acccesibles desde fuera de la clase o por lo menos e forma directa.</p>

<h2 id="property">property()</h2>

<p>property() es una funci√≥n integrada en Python que permite interceptar la lectura, escritura y borrado de atributos.</p>

<p>Para invocar la funci√≥n <code class="language-plaintext highlighter-rouge">property()</code> utilizamos el decorador <code class="language-plaintext highlighter-rouge">@property</code>.</p>

<p>El decorador @property nos permite utilizar un m√©todo como atributo.</p>

<p>Aclarar que un m√©todo es una funci√≥n dentro de una clase.</p>

<p>Al utilizar @property ya no se permite acceder ni cambiar el valor del atributo al vuelo desde fuera de la clase con la sintaxis del punto para acceder y la sintaxis de asignaci√≥n par asignar nuevos valores.</p>

<p>Si quieres modificar un m√©todo o instancia de variable de un @property desde fuera de la clase hay que crear un <code class="language-plaintext highlighter-rouge">setter</code> para exponerlo.</p>

<p>¬øPor qu√© crear un @property si lo vamos a exponer igualmente con setter?</p>

<p>Porque con @property y setter podemos crear ciertas normas o crear una validaci√≥n.</p>

<p>En el siguiente ejemplo he creado dos <code class="language-plaintext highlighter-rouge">@property</code> para los dos atributos de la clase <code class="language-plaintext highlighter-rouge">Villain</code>. Sin embargo he establecido el atributo <code class="language-plaintext highlighter-rouge">name</code> como protegido y he expuesto el atributo <code class="language-plaintext highlighter-rouge">quote</code> con un <code class="language-plaintext highlighter-rouge">setter</code>, por lo que permite cambiar la frase del villano pero no el nombre.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Villain</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">quote</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_quote</span> <span class="o">=</span> <span class="n">quote</span>

    <span class="k">def</span> <span class="nf">villain_says</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">f'</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">_name</span><span class="si">}</span><span class="s"> dice </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">_quote</span><span class="si">}</span><span class="s">'</span>

    <span class="o">@</span><span class="nb">property</span>
    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_name</span>

    <span class="o">@</span><span class="nb">property</span>
    <span class="k">def</span> <span class="nf">quote</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_quote</span>

    <span class="o">@</span><span class="n">quote</span><span class="p">.</span><span class="n">setter</span>
    <span class="k">def</span> <span class="nf">quote</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">quote</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_quote</span> <span class="o">=</span> <span class="n">quote</span>


<span class="n">joker</span> <span class="o">=</span> <span class="n">Villain</span><span class="p">(</span><span class="s">'Joker'</span><span class="p">,</span> <span class="s">'Siempre hay que tener un as en la manga'</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">joker</span><span class="p">.</span><span class="n">villain_says</span><span class="p">())</span>  <span class="c1"># Getter
</span>
<span class="c1"># Output: Joker dice Siempre hay que tener un as en la manga
</span>
<span class="n">joker</span><span class="p">.</span><span class="n">quote</span> <span class="o">=</span> <span class="s">'¬°Esa fea cabeza tuya tiene cerebro!'</span>

<span class="k">print</span><span class="p">(</span><span class="n">joker</span><span class="p">.</span><span class="n">villain_says</span><span class="p">())</span>  <span class="c1"># Getter
</span>
<span class="c1"># Output: Joker dice ¬°Esa fea cabeza tuya tiene cerebro!
</span></code></pre></div></div>

<h2 id="p√∫blico-privado-y-protegido">P√∫blico, Privado y Protegido</h2>

<p><strong>¬øCu√°ndo hago un atributo p√∫blico?</strong></p>

<p>Si lo va a utilizar alguien fuera de la clase se hace p√∫blico.</p>

<p>Por defecto todos los m√©todos y variables son p√∫blicos en Python.</p>

<p><strong>¬øCu√°ndo hago un atributo protegido?</strong></p>

<p>Si lo va a utilizar alguien fuera de la clase, pero quieres establecer unas reglas de modificaci√≥n, utiliza un @property con un setter para protegerlo.</p>

<p>A los atributos protegidos se les pone un gui√≥n bajo delante.</p>

<p><strong>¬øCu√°ndo lo hago privado?</strong></p>

<p>Si el atributo de la clase no lo tiene que utilizar nadie fuera de la clase, se hace privado con @property.</p>

<p>A los atributos privados se les pone doble gui√≥n bajo delante.</p>
:ET