I"<K<p><a href="https://jekyllrb.com/">Jekyll</a> es un generador de sitios web estáticos preparado para blogging creado en Ruby por <a href="https://www.wikiwand.com/en/Tom_Preston-Werner">Tom Preston</a>, el cofundador de Github.</p>

<p>Jekyll es el motor detrás de <a href="https://pages.github.com/">GitHub Pages</a> por lo que puedes alojar tu sitio web en GitHub de forma gratuita.</p>

<p>Jekyll utiliza <a href="https://shopify.github.io/liquid/">Liquid</a> de Shopify como motor de plantillas.</p>

<p>Los posts en Jekyll normalmente se escriben en <a href="https://daringfireball.net/projects/markdown/">Markdown</a>, pero puedes utilizar HTML.</p>

<p>En el inicio de cada post y página en Jekyll va un bloque de código <a href="http://yaml.org/">YAML Frontmatter</a>.</p>

<p>El código YAML siempre va al principio entre triples guiones.</p>

<p>YAML tiene este aspecto:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: I have no idea what i'm doing
---
</code></pre></div></div>

<p>La estructura de un sitio en Jekyll es algo así:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── _config.yml
├── _data
|   └── members.yml
├── _drafts
|   ├── el-post-que-me-hara-famoso.md
|   └── el-post-que-no-terminare-de-escribir.md
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2017-10-29-no-tengo-ni-idea-de-lo-que-estoy-haciendo.md
|   └── 2017-04-26-mi-primer-post-en-jekyll.md
├── _sass
|   ├── _base.scss
|   └── _layout.scss
├── _site
└── index.html
# también puede ser 'index.md' con YAML Frontmatter
</code></pre></div></div>

<p><strong>_config.yml</strong> es el archivo de configuración de Jekyll donde podemos declarar las variables que queramos. Para aceder a las variables declaradas en _config.yml desde nuestras plantillas utilizaremeos la sintaxis {{ site.mi_variable }}.</p>

<p><strong>_drafts</strong> es la carpeta donde guardamos los posts en los que estamos trabajando, pero que todavía no hemos terminado.</p>

<h3 id="instalación-de-jekyll">Instalación de Jekyll</h3>

<p>Si ya tienes <a href="https://www.ruby-lang.org/en/downloads/">Ruby</a> y <a href="https://rubygems.org/pages/download">RubyGems</a> instalados en tu máquina, puedes crear un nuevo sitio en Jekyll de este modo:</p>

<p>Instalar las gemas Jekyll y Bundler a traves de RubyGems
<code class="language-plaintext highlighter-rouge">$ gem install jekyll bundler</code></p>

<p>Crear un nuevo sito Jekyll en ./myblog
<code class="language-plaintext highlighter-rouge">$ jekyll new myblog</code></p>

<p>Cambiar a tu nuevo directorio
<code class="language-plaintext highlighter-rouge">$ cd myblog</code></p>

<p>Montar el sitio en el servidor local
<code class="language-plaintext highlighter-rouge">$ bundle exec jekyll serve</code></p>

<p>Ahora puedes ver tu sitio en <code class="language-plaintext highlighter-rouge">http://localhost:4000</code></p>

<div class="alert alert-info" role="alert">
  <p><i class="fas fa-sticky-note"></i> Nota:</p>
  <p>Oficialmente Jekyll no tiene soporte para Windows, pero puede instalarse en Windows, con un poco de trabajo extra.</p>
  Instrucciones para instalar <a href="https://jekyllrb.com/docs/windows/#installation">Jekyll en Windows.</a>
</div>

<h3 id="temas">Temas</h3>

<p>Los Temas en Jekyll también son gemas de Ruby, puede que esto no sea raro en el mundo de Ruby pero si para los neófitos como yo.</p>

<p>Qué significa esto?</p>

<p>Cuando creas un nuevo sitio en Jekyll con <code class="language-plaintext highlighter-rouge">jekyll new new-shiny-site</code>, Jekyll instala un sitio con el tema <a href="https://github.com/jekyll/minima">Minima</a>, con el sistema de gemas.</p>

<p>Con este sistema algunos de los directorios como <code class="language-plaintext highlighter-rouge">assets</code>,<code class="language-plaintext highlighter-rouge">_layouts</code>,<code class="language-plaintext highlighter-rouge">_includes</code> y <code class="language-plaintext highlighter-rouge">_sass</code> se quedan ocultos en las gemas del tema, aunque sean leídos y procesados por Jekyll, no los vas a ver en tu directorio principal y por lo tanto, no vas a poder trabajar con ellos.</p>

<h3 id="convertir-un-tema-basado-en-gemas-en-un-tema-en-el-que-podemos-trabajar">Convertir un tema basado en gemas en un tema en el que podemos trabajar</h3>

<p>Para poder crear nuestros temas queremos que todos los archivos estén a mano en el directorio principal de Jekyll, no en el mundo mágico de las gemas.</p>

<p>Puedes descargar <a href="https://github.com/jekyll/minima" target="_blank">minima</a> para copiar los archivos del theme en el directorio principal y eliminar las referencias al tema original basado en gemas, en este caso minima.</p>

<p>Eliminar referencias al gem theme:</p>

<ol>
  <li>Abre el archivo <code class="language-plaintext highlighter-rouge">Gemfile</code> y elimina o comenta la línea donde hace referencia al theme <code class="language-plaintext highlighter-rouge">gem "minima", "~&gt; 2.0"</code>.</li>
  <li>Abre el archivo de configuración de Jekyll <code class="language-plaintext highlighter-rouge">_config.yml</code> y elimina <code class="language-plaintext highlighter-rouge">theme: minima</code>.</li>
</ol>

<p>Si has llegado hasta aquí, felicidades! Ahora tienes un tema totalmente independiente (e inservible).</p>

<div class="alert alert-warning" role="alert">
<p><i class="fa fa-exclamation" aria-hidden="true"></i> Advertencia:</p>
  <p>Hemos eliminado todas las referencias al tema inicial por lo que ahora tu Jekyll va a dar errores.</p>
  <p>Te dará el error de que no encuentra los svg de los iconos sociales en el footer, elimina esa parte y cualquier otra que te de errores, ahora el tema es tuyo! No tengas miedo de cargarte todo lo que no te haga falta de minima theme.</p>
  <p>Las clases, puedes eliminarlas o reusarlas si te gusta como están nombradas, pero ya no hacen referencia a ningún css, tendrás que crear tus propios estilos para darle forma de nuevo al tema. Tranquilo, minima es un tema muy simple y no hay mucho que eliminar realmente.</p>
</div>

<p>Hemos instalado Jekyll y preparado los archivos para nuestro tema, nos hemos cargado las referencias al theme original y nos hemos quedado con un churro de website, enhorabuena!!</p>

<p>Edita los estilos para que la cosa quede presentable y pasamos a la siguiente tarea, añadir Gulp!</p>
<h3 id="gulp"><a href="https://gulpjs.com/">Gulp</a></h3>

<p>Gulp es un automatizador de tareas hecho en Node.js.</p>

<p>Tanto el código de Gulp como tu Gulp file donde defines tus tareas están escritos en JavaScript.</p>

<p>Gulp nos ayuda a organizar, compilar y optimizar nuestro código.</p>

<p>Gulp usado correctamente puede mejorar tu workflow y la nota de tu sitio web en Google Page Speed.</p>

<p>Gulp te da total libertad a la hora de organizar el código por lo que los requisitos de la estructura de archivos de tu sitio no serán un problema.</p>

<p>La instalación de Gulp se hace con npm.</p>

<p>Instalar Gulp sencillo, primero se tiene que instalar globalmente:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> gulp
</code></pre></div></div>

<p>Después tienes que instalarlo en tu proyecto:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --save-dev gulp
</code></pre></div></div>

<h3 id="browsersync"><a href="https://browsersync.io/" target="_blank">Browsersync</a></h3>

<p>Browsersync es un servidor local muy útil para desarrollo.</p>

<p>Es lo mismo que utilizar jekyll serve y recargar la página manualmente pero más rápido y con algunas ventajas:</p>

<ul>
  <li>
    <p>Actualiza el navegador automáticamente en varios dispositivos y navegadores.</p>
  </li>
  <li>
    <p>Todos los navegadores siguen el scroll hasta el mismo punto.</p>
  </li>
  <li>
    <p>Todos los navegadores cargan los links al hacer click.</p>
  </li>
  <li>
    <p>Puede simular conexiones lentas, Browsersync puede simular que estas visitando tu web desde un lugar donde no llegan los 50MB de fibra que tienes en casa.</p>
  </li>
  <li>
    <p>Es compatible con Gulp.</p>
  </li>
  <li>
    <p>Es gratis y opensource.</p>
  </li>
</ul>

<p>Browsersync te facilita cuatro URL:</p>

<ol>
  <li><strong>Local</strong>: donde puedes ver tu proyecto.</li>
  <li><strong>Externa</strong>: la dirección donde cualquier usuario en tu red local (Lan o Wifi) puede ver el proyecto.</li>
  <li><strong>UI</strong>: Browserync UI te muestra todas las opciones de Browsersync.</li>
  <li><strong>UI Externa</strong>: La UI para cualquier usuario de tu red.</li>
</ol>

<p><img src="/assets/images/blog/browsersync-url.png" alt="Browsersync UI" class="img-fluid" /></p>

<p>Este es el aspecto de la UI de Browsersync, que en mi caso está en el puerto 3001.</p>

<p><img src="/assets/images/blog/browsersync-ui.png" alt="Browsersync UI" class="img-fluid" /></p>
<h3 id="determinar-que-tareas-quieres-que-haga-jekyll-y-que-tareas-quieres-que-haga-gulp">Determinar que tareas quieres que haga Jekyll y que tareas quieres que haga Gulp</h3>

<p>Tanto Jekyll como Gulp pueden procesar Sass, copiar assets a _dist y lanzar un server local, por lo que tendrás que elegir que tareas quieres que haga cada uno.</p>

<p>Tienes mucha libertad para hacer esto, esta es mi elección personal:</p>
<h3 id="tareas-para-jekyll">Tareas para Jekyll</h3>

<ol>
  <li>Limpiar el contenido de _site cada vez que se ejecuta jekyll build.</li>
  <li>Procesar Markdown, gestionar los archivos del Blog y montar los layouts con Liquid y YAML.</li>
  <li>Copiar los assets de la raiz a _site.</li>
</ol>

<p>Jekyll por defecto copia todos los archivos y carpetas que encuentra en la raíz con algunas excepciones:</p>

<ol>
  <li>Carpetas nombradas con un guión bajo al principio.</li>
  <li>Archivos con un punto al principio.</li>
  <li>Archivos que especifiques ignorar en tu _config.yml.</li>
</ol>

<p>Para que te hagas una idea, estos son los archivos que estoy copiando e ignorando:</p>

<p><strong>Estoy copiando las páginas que tiene mi proyecto más los assets que contienen todo e código css y JavaScript ya procesado por Gulp:</strong></p>

<ul>
  <li>about</li>
  <li>assets</li>
  <li>blog</li>
  <li>contact</li>
  <li>open-source</li>
  <li>post</li>
  <li>index.html</li>
</ul>

<p><strong>Estoy excluyendo:</strong></p>

<ul>
  <li>Gemfile</li>
  <li>Gemfile.lock</li>
  <li>vendor</li>
  <li>gulpfile.js</li>
  <li>package-lock.json</li>
  <li>package.json</li>
  <li>node_modules</li>
  <li>README.md</li>
  <li>readme.md</li>
  <li>CHANGELOG.md</li>
</ul>

<h3 id="tareas-para-gulp">Tareas para Gulp</h3>

<ol>
  <li>Copiar las fuentes de _assets a assets</li>
  <li>Procesar los estilos</li>
  <li>Procesar los Scripts</li>
  <li>Minificar las imágenes</li>
  <li>Ejecutar Jekyll</li>
  <li>Lanzar el servidor local Browsersync</li>
  <li>Vigilar cambios y refrescar el navegador</li>
</ol>

<p><strong>Procesar estilos</strong></p>

<p>Jekyll por defecto compila Sass, pero hacerlo con Gulp tiene varias ventajas:</p>

<p>Podemos utilizar los plugins de Gulp para procesar estilos, hay muchos, yo de momento he empezado con dos:</p>

<ul>
  <li><strong>gulp-sass</strong>: compila sass.</li>
  <li><strong>gulp-autoprefixer</strong>: añade los prefijos de navegador necesarios y elimina los que ya no lo son.</li>
</ul>

<p><strong>Ejecutar Jekyll y lanzar Browsersync</strong></p>

<p>Con la orden <code class="language-plaintext highlighter-rouge">jekyll serve</code> Jekyll monta un servidor interno en localhost:4000, pero como hemos comentado, utilizar Browsersync tiene sus ventajas.</p>

<p>Necesitamos ejecutar Jekyll para que procese Markdown, copie los assets, las páginas independientes y los archivos del blog a _dist, pero no queremos otro server en funcionamiento.</p>

<p>Por esta razón, no vamos a ejecutar <code class="language-plaintext highlighter-rouge">jekyll serve</code>, en su lugar vamos a ejecutar <code class="language-plaintext highlighter-rouge">jekyll build</code>.</p>

<p><code class="language-plaintext highlighter-rouge">jekyll serve</code> procesa el html, copia los archivos a _dist, monta un server local y vigila los cambios.</p>

<p><code class="language-plaintext highlighter-rouge">jekyll build</code> se limita a procesar el html y copiar los archivos a _dist.</p>

<p>Para ejecutar Jekyll desde Gulp utilizo el plugin <a href="https://www.npmjs.com/package/gulp-shell">Gulp-shell</a>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Build Jekyll</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">"</span><span class="s2">build:jekyll</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">gulp</span>
    <span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="dl">"</span><span class="s2">index.html</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">read</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
      <span class="nx">shell</span><span class="p">([</span>
        <span class="dl">"</span><span class="s2">bundle exec jekyll build --drafts --config _config.yml,_config.dev.yml</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">])</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span> <span class="nx">gutil</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Y así es como estoy lanzando Browsersync desde Gulp:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Serve</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">"</span><span class="s2">serve</span><span class="dl">"</span><span class="p">,</span> <span class="p">[</span><span class="dl">"</span><span class="s2">sass</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">build:jekyll</span><span class="dl">"</span><span class="p">],</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">browserSync</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
    <span class="na">port</span><span class="p">:</span> <span class="mi">4000</span><span class="p">,</span>
    <span class="na">server</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">baseDir</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./_site</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p><strong>Vigilar cambios y refrescar el navegador</strong></p>

<p>Queremos que Gulp vigile los cambios y refresque el navegador cuando cambie algo en cualquier parte del proyecto.</p>

<p>Para esto tenemos que crear una tarea watch en Gulp:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Watch</span>
<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="dl">"</span><span class="s2">watch</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">([</span><span class="dl">"</span><span class="s2">scss/*.scss</span><span class="dl">"</span><span class="p">],</span> <span class="p">[</span><span class="dl">"</span><span class="s2">build:styles</span><span class="dl">"</span><span class="p">]);</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">([</span><span class="dl">"</span><span class="s2">js/*js</span><span class="dl">"</span><span class="p">],</span> <span class="p">[</span><span class="dl">"</span><span class="s2">build:jekyll</span><span class="dl">"</span><span class="p">]);</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span>
    <span class="p">[</span><span class="dl">"</span><span class="s2">**/*.+(html|md|markdown|MD)</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">!_site/**/*.*</span><span class="dl">"</span><span class="p">],</span>
    <span class="p">[</span><span class="dl">"</span><span class="s2">rebuild:jekyll</span><span class="dl">"</span><span class="p">]</span>
  <span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<div class="alert alert-info" role="alert">
  <p><i class="fas fa-sticky-note"></i> Nota:</p>
  <p>Es importante excluir la carpeta _site de la tarea watch, para que browsersync no entre en un loop de recargar el navegador.</p>
</div>

<p>Crear un archivo de configuración distinto para desarrollo no es obligatorio pero puede ser útil.</p>

<p>En mi caso he creado un archivo _config.dev.yml en el que he cambiado la url del proyecto para desarrollo.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">url</span><span class="pi">:</span> <span class="s">http://netinetidesign.com // url en producción</span>
<span class="na">url</span><span class="pi">:</span> <span class="s">http://localhost:4000     // url en desarrollo</span>
</code></pre></div></div>

<p>Para sobreescribir tu config.yml con config.dev.yml cuando ejecutes jekyll en desarrollo, hazlo de este modo:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">bundle exec jekyll build --config _config.yml,_config.dev.yml</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<div class="alert alert-info" role="alert">
  <p><i class="fab fa-github"></i></p>
  <p>Mi <a href="https://github.com/MarcelReig/netinetidesign/blob/master/gulpfile.js" target="_blanc">gulpfile</a> por si te sirve de referencia.</p>
</div>
<div class="spacer"></div>
:ET