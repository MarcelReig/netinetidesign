I"q)<h3 class="lead" id="python-es-un-lenguaje-de-propósito-general-con-una-sintaxis-limpia-y-sencilla-por-lo-que-es-una-buena-elección-para-aprender-a-programar">Python es un lenguaje de propósito general con una sintaxis limpia y sencilla, por lo que es una buena elección para aprender a programar.</h3>

<h3 class="lead" id="python-fue-creado-en-los-90-por-guido-van-rossum-su-nombre-viene-de-los-humoristas-britanicos-monty-python">Python fue creado en los 90 por <a href="https://twitter.com/gvanrossum?s=20" target="\_blank">Guido van Rossum</a>, su nombre viene de los humoristas britanicos Monty Python.</h3>

<h3 class="lead mb-5" id="si-quieres-cear-aplicaciones-web-en-python-puedes-utilizar-algunso-de-sus-frameworks-django-o-flask">Si quieres cear aplicaciones web en Python puedes utilizar algunso de sus frameworks <a href="https://www.djangoproject.com/" target="\_blank">django</a> o <a href="https://flask.palletsprojects.com/en/2.0.x/" target="\_blank">Flask</a>.</h3>

<h2 id="empezar-a-programar-en-python">Empezar a programar en Python</h2>

<p><strong>Sin instalación</strong></p>

<p>La manera más fácil de probar el lenguaje es utilizar <a href="https://replit.com/" target="\_blank">replit</a> o <a href="https://www.anyfiddle.com/">anyfidle</a>, son herramientas tipo codepen pero que te permiten programar en Python.</p>

<p><strong>Con instalación</strong></p>

<p>Las herraminetas mencionadas anteriormente están bién para probar el lenguaje, pero tarde o temprano tendrás que instalar Python en tu computadora.</p>

<p>Para instalar Python ves a <a href="https://www.python.org/" target="\_blank">python.org</a> y descarga la versión de Python para tu sistema operativo.</p>

<div class="alert alert-info" role="alert">
 <p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>Para instalar Python en Mac te recomiendo seguir el <a href="https://www.freecodecamp.org/news/python-version-on-mac-update/" target="_blank">tutorial de Quincy Larson</a> en freeCodeCamp.</p>
</div>

<p>Una vez instalado Python en tu computadora abre la terminal y escribe <code class="language-plaintext highlighter-rouge">python3</code>, esto te abrirá un interprete de Python en el que ya puedes ejecutar funciones de Python.</p>

<p><img src="/assets/images/blog/python-term.png" width="800" class="img-fluid text-center m-xl-auto" alt="python" /></p>

<h2 id="entorno-de-programación">Entorno de programación</h2>

<p>No necesitas un IDE especializado para empezar a programar en Python, cualquier editor de código te irá bien.</p>

<p>Mi editor habitual es <a href="https://code.visualstudio.com/" target="\_blank">Visual Studio Code</a> el cual tiene una <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="\_blank">extensión para Python</a> pero de momento estoy utilizando <a href="https://www.jetbrains.com/es-es/pycharm/download/" target="\_blank">PyCharm</a> la versión <strong>Community</strong> que es gratuita y para aprender el lenguaje es muy cómodo.</p>

<div class="alert alert-info" role="alert">
 <p><i class="fas fa-sticky-note"></i> Nota:</p>
<p> En los siguientes ejemplos mostraré lo que devuelve la consola de Python en un <code># comenterio de Python`, para no tener que escribir otro bloque de código solo con el output.&lt;/p&gt;
&lt;/div&gt;

## Características principales del lenguaje

- Es un **lenguaje interpretado**, no compilado.
- Usa **tipado dinámico**, una variable puede tomar valores de distinto tipo.
- Es **fuertemente tipado**, el tipo no cambia de manera repentina. Para que se produzca un cambio de tipo se tiene que hacer una conversión explícita.
- Es **multiplataforma**, el mismo código funciona en macOS, Windows y Linux.

## Indentación

Python utiliza la indentación para indicar el inicio y fín de un bloque de código.

```py
def saludar(first_name, last_name):
    return("Hi " + first_name + " " + last_name + "!")
print(saludar("Ana", "Toledo"))
```

## Comentarios

```py
# Comentario de una línea
```

Los comentarios de varias líneas se hacen con 3 comillas dobles o simples al inicio y al final del comentario.

```py
'''
Comentario
de varias
líneas
'''
```

## Variables

Las variables nos permiten guardar valores que más tarde podemos utilizar en nuestro código.
Las variables pueden guardar cualquier tipo de dato, enteros, flotantes, booleanos y cadenas o Strings, también podemos guardar listas y tuplas.

```py
mascota = "Perro" # string
raza_peligrosa = True # booleano
edad = 2 # entero
```

## Tipos de datos

- Booleanos
- Números
- Cadenas
- Listas
- Tuplas
- Diccionarios
- set
- Mutables e Inmutables

## Trabajando con cadenas en Python

## Trabajando con listas en Python

Una lista es una secuencia ordenada de elementos, las listas no son inmutables, podemos añadir, eliminar, mover y cambiar items de lista a nuestro antojo.
Las listas se crean añadiendo valores entre `[ ]` corchetes.

```py
helados = ['chocolate', 'limón', 'mango']
print(helados)
# ['chocolate', 'limón', 'mango']

helados.insert(1, 'vainilla')

print(helados)
# ['chocolate', 'vainilla', 'limón', 'mango']

helados.append('pistacho')

print(helados)
# ['chocolate', 'vainilla', 'limón', 'mango', 'pistacho']

```

Podemos acceder a los valores de lista por su índice igual que en las cadenas.

```py
helados = ['chocolate', 'limón', 'mango']
print(helados[2])
# mango
```

Si no te gusta el mango siempre puedes cambiarlo por fresas silvestres asignándole otro valor a través de su índice.

```py
helados = ['chocolate', 'limón', 'mango']
helados[2] = 'fresas silvestres'
print(helados)
# ['chocolate', 'limón', 'fresas silvestres']
```

También puedes utilizar el método `.remove()` para eliminarlo de la lista.

```py
helados = ['chocolate', 'limón', 'mango']
helados.remove('mango')
print(helados) # ['chocolate', 'limón']
```

Otro método que tenemos disponible para eliminar elementos de lista en Python es `.pop()`.
Si vienes de JavaScript este método ya te sonará.
`.pop()` lo que hace es eliminar el último elemento de la lista pero no solo eso, también lo retorna por lo que podemos guardarlo en una variable.

```py
helados = ['chocolate', 'limón', 'mango']
ultimo_helado = helados.pop()
print(ultimo_helado) # mango
print(helados) # ['chocolate', 'limón']
```

También puedes utilizar la palabra clave `del` para eliminar elementos de lista.

```py
helados = ['chocolate', 'limón', 'mango']
del helados[2]
print(helados) # ['chocolate', 'limón']
```

Python nos permite crear listas de listas o Nested lists.

```py
nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print(nested_list[0][1])  # 2

print(nested_list[1][-1])  # 6
```

Para acceder al último elemento de la lista utilizamos el indice negativo  `[-1]`.

```py
helados = ['chocolate', 'limón', 'mango']
print(helados[-1])  # mango
```

Para saber cuantos elementos tiene una lista utilizamos la función predefinida de Python `len`.

```py
helados = ['chocolate', 'limón', 'mango']
print(len(helados))  # 3
```

Para saber en que índice se encuentra un elemento utilizamos el método `.index()`.
```py
helados = ['chocolate', 'limón', 'mango']
print(helados.index('limón'))  # 1
```

El método `.sort()` ordena los ítems de lista alfabéticamente.

```py
helados = ['café', 'straciatella', 'avellana']
helados.sort()
print(helados)
#  ['avellana', 'café', 'straciatella']
```

El método `.reverse()` invierte los elementos de la lista original.

En el siguiente ejemplo hacemos uso de `.sort()` y `.reverse()` para ordenar una lista de Z a A.

```py
helados = ['café', 'straciatella', 'avellana']

helados.sort(reverse=True)

print(helados)
#  ['straciatella', 'café', 'avellana']
```
## Tuplas

## Números

**Enteros** (`int`) números sin decimales, por ejemplo `500` o `-350`.

```py
sumar_enteros = 5 + 5
print(sumar_enteros)  # 10
```
**Números con decimales** (`float`) por ejemplo `0.20` o `-34.000`.

```py
sumar_decimales = 5.50 + 0.8
print(sumar_decimales)  # 6.3
```
Operadores aritméticos en Python:

<table class="table table-bordered">
  <thead>
    <tr>
      <th scope="col">Operador </th>
      <th scope="col">Descripción </th>
      <th scope="col">Uso </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">+</th>
      <td>Suma</td>
      <td>5 + 5 = 10 </td>
    </tr>
    <tr>
      <th scope="row">-</th>
      <td>Resta</td>
      <td>4 - 3 = 1</td>
    </tr>
    <tr>
      <th scope="row">*</th>
      <td>Multiplicación</td>
      <td>8 * 2 = 16</td>
    </tr>
        <tr>
      <th scope="row">/</th>
      <td>División</td>
      <td>16 / 2 = 8</td>
    </tr>
    <tr>
      <th scope="row">%</th>
      <td>Módulo</td>
      <td>16 % 3 = 1</td>
    </tr>
    <tr>
      <th scope="row">**</th>
      <td>Exponente</td>
      <td>12 ** 3 = 1728</td>
    </tr>
      <tr>
      <th scope="row">//</th>
      <td>División entera</td>
      <td>18 // 5 = 3</td>
    </tr>
  </tbody>
</table>

## Función print()

## Condicionales

```py
es_barato = True
es_bueno = True

if es_barato and es_bueno:
    print("Toma mi dinero!")
elif es_barato and not es_bueno:
    print("Eres barato pero no eres bueno")
elif not es_barato and es_bueno:
    print("Eres bueno pero no eres barato")
else:
    print("Eres una estafa")
```

Con los condicionales en Python puedes construir cosas tan geniales como una pequeña calculadora.

```py
num1 = float(input("Introduce un número: "))
op = input("Introduce un operador: ")
num2 = float(input("Introduce el segundo número: "))

if op == '+':
    print(num1 + num2)
elif op == '-':
    print(num1 - num2)
elif op == '/':
    print(num1 / num2)
elif op == '*':
    print(num1 * num2)
else:
    print('Introduce un operador válido')
```

## Iteraciones en Python

- While
- For

## Funciones en Python

Las funciones en Python se crean mediante la instrucción `def`más el nombre de la función.

```py
def my_function(param1, param2):
    print(param1 + param2)
```

Para invocar la función escribimos el nombre de la función más paréntesis y los parámetros de la función si los tiene.
No todas las funciones tienen que tener parámetros.

```py
my_function(4, 6) # 10
```
## Funciones lambda

Las funciones normales en Python se definen con `def`.
Las funciones anonimas en Python se definen con `lambda`.

```py
# Función normal
def myfunc(x, y, z):
    result = x + y + z
    return result

print(myfunc(2, 4, 3)) # 9
```

```py
#Función lambda
result2 = lambda x, y, z: x + y + z

print(result2(2, 4, 3)) # 9
```


## Diccionarios

## Clases y objetos
</code></p></div>
:ET