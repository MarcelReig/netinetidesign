I"7ï<h3 class="lead" id="python-es-un-lenguaje-de-prop√≥sito-general-con-una-sintaxis-limpia-y-sencilla-por-lo-que-es-una-buena-elecci√≥n-para-aprender-a-programar">Python es un lenguaje de prop√≥sito general con una sintaxis limpia y sencilla, por lo que es una buena elecci√≥n para aprender a programar.</h3>

<h3 class="lead" id="python-fue-creado-en-los-90-por-guido-van-rossum-su-nombre-viene-de-los-humoristas-britanicos-monty-python">Python fue creado en los 90 por <a href="https://twitter.com/gvanrossum?s=20" target="\_blank">Guido van Rossum</a>, su nombre viene de los humoristas britanicos Monty Python.</h3>

<h3 class="lead mb-5" id="si-quieres-cear-aplicaciones-web-en-python-puedes-utilizar-algunso-de-sus-frameworks-django-o-flask">Si quieres cear aplicaciones web en Python puedes utilizar algunso de sus frameworks <a href="https://www.djangoproject.com/" target="\_blank">django</a> o <a href="https://flask.palletsprojects.com/en/2.0.x/" target="\_blank">Flask</a>.</h3>

<h2 id="empezar-a-programar-en-python">Empezar a programar en Python</h2>

<p><strong>Sin instalaci√≥n</strong></p>

<p>La manera m√°s f√°cil de probar el lenguaje es utilizar <a href="https://replit.com/" target="\_blank">replit</a> o <a href="https://www.anyfiddle.com/">anyfidle</a>, son herramientas tipo codepen pero que te permiten programar en Python.</p>

<p><strong>Con instalaci√≥n</strong></p>

<p>Las herraminetas mencionadas anteriormente est√°n bi√©n para probar el lenguaje, pero tarde o temprano tendr√°s que instalar Python en tu computadora.</p>

<p>Para instalar Python ves a <a href="https://www.python.org/" target="\_blank">python.org</a> y descarga la versi√≥n de Python para tu sistema operativo.</p>

<div class="alert alert-info" role="alert">
<p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>Para instalar Python en Mac te recomiendo seguir el <a href="https://www.freecodecamp.org/news/python-version-on-mac-update/" target="_blank">tutorial de Quincy Larson</a> en freeCodeCamp.</p>
</div>

<p>Una vez instalado Python en tu computadora ya puedes abrir la terminal y escribir <code class="language-plaintext highlighter-rouge">python3</code>, esto te abrir√° un interprete de Python en el que ya puedes ejecutar funciones de Python.</p>

<p><img src="/assets/images/blog/python-term.png" width="800" class="img-fluid text-center m-xl-auto" alt="python" /></p>

<div class="alert alert-info" role="alert">
 <p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>Una vez instalado Python 3 ya puedes escribir comandos de Python detr√°s de los tres s√≠mbolos <code>&gt;&gt;&gt;</code><br />Si quieres c√≥digo coloreado y que te avise de errores instala un editor de c√≥digo.</p>
</div>

<h2 id="entorno-de-programaci√≥n">Entorno de programaci√≥n</h2>

<p>No necesitas un IDE especializado para empezar a programar en Python, cualquier editor de c√≥digo te ir√° bien.</p>

<p>Mi editor habitual es <a href="https://code.visualstudio.com/" target="\_blank">Visual Studio Code</a> el cual tiene una <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="\_blank">extensi√≥n para Python</a> pero de momento estoy utilizando <a href="https://www.jetbrains.com/es-es/pycharm/download/" target="\_blank">PyCharm</a> la versi√≥n <strong>Community</strong> que es gratuita y para aprender el lenguaje es muy c√≥modo.</p>

<h2 id="caracter√≠sticas-principales-del-lenguaje">Caracter√≠sticas principales del lenguaje</h2>

<ul>
  <li>Es un <strong>lenguaje interpretado</strong>, no compilado.</li>
  <li>Usa <strong>tipado din√°mico</strong>, una variable puede tomar valores de distinto tipo.</li>
  <li>Es <strong>fuertemente tipado</strong>, el tipo no cambia de manera repentina. Para que se produzca un cambio de tipo se tiene que hacer una conversi√≥n expl√≠cita.</li>
  <li>Es <strong>multiplataforma</strong>, el mismo c√≥digo funciona en macOS, Windows y Linux.</li>
</ul>

<h2 id="indentaci√≥n">Indentaci√≥n</h2>

<p>Python utiliza la indentaci√≥n para indicar el inicio y f√≠n de un bloque de c√≥digo.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">saludar</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">):</span>
    <span class="k">return</span><span class="p">(</span><span class="s">"Hi "</span> <span class="o">+</span> <span class="n">first_name</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">last_name</span> <span class="o">+</span> <span class="s">"!"</span><span class="p">)</span> <span class="c1"># c√≥digo indentado
</span><span class="k">print</span><span class="p">(</span><span class="n">saludar</span><span class="p">(</span><span class="s">"Ana"</span><span class="p">,</span> <span class="s">"Toledo"</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="comentarios">Comentarios</h2>
<p>Comentario de una l√≠nea.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Hola soy un comentario
</span></code></pre></div></div>

<p>Los comentarios de varias l√≠neas se hacen con 3 comillas dobles o simples al inicio y al final del comentario.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""
Comentario
de varias
l√≠neas
"""</span>
</code></pre></div></div>

<div class="alert alert-info" role="alert">
 <p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>En los siguientes ejemplos utilizar√© <code># Comentarios de Python</code> para mostrar el resultado de la consola u otras aclaraciones.</p>
</div>

<h2 id="variables">Variables</h2>

<p>Las variables nos permiten guardar valores que m√°s tarde podemos utilizar en nuestro c√≥digo.
Las variables pueden guardar cualquier tipo de dato, enteros, flotantes, booleanos y cadenas o Strings, tambi√©n podemos guardar listas y tuplas.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># variable que contiene un string
</span><span class="n">mascota</span> <span class="o">=</span> <span class="s">"Perro"</span>
<span class="c1"># variable que contiene un booleano
</span><span class="n">raza_peligrosa</span> <span class="o">=</span> <span class="bp">True</span>
<span class="c1"># variable que contiene un n√∫mero entero
</span><span class="n">edad</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></div></div>

<h2 id="tipos-de-datos">Tipos de datos</h2>

<ul>
  <li>Booleanos</li>
  <li>N√∫meros</li>
  <li>Cadenas</li>
  <li>Listas</li>
  <li>Tuplas</li>
  <li>Diccionarios</li>
  <li>set</li>
  <li>Mutables e Inmutables</li>
</ul>

<h2 id="trabajando-con-cadenas-en-python">Trabajando con cadenas en Python</h2>

<p>Las cadenas (<code class="language-plaintext highlighter-rouge">string</code>) se crean escribiendo una una secuencia de car√°cteres, letras, n√∫meros o s√≠mbolos entre comillas simples <code class="language-plaintext highlighter-rouge">''</code> o dobles <code class="language-plaintext highlighter-rouge">""</code>.</p>

<p>Puedes guardar un <code class="language-plaintext highlighter-rouge">string</code> en una variable del siguiente modo:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_str</span> <span class="o">=</span> <span class="s">'Fixie pug hoodie'</span>
<span class="k">print</span><span class="p">(</span><span class="n">my_str</span><span class="p">)</span> <span class="c1"># Fixie pug hoodie
</span></code></pre></div></div>

<p>Puedes concatenar variables que contienen cadenas utilizando el operador <code class="language-plaintext highlighter-rouge">+</code> de suma:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_str1</span> <span class="o">=</span> <span class="s">'Roof'</span>
<span class="n">my_str2</span> <span class="o">=</span> <span class="s">'party'</span>
<span class="n">my_str3</span> <span class="o">=</span> <span class="s">'wolf'</span>
<span class="n">my_str4</span> <span class="o">=</span> <span class="s">'iPhone'</span>

<span class="k">print</span><span class="p">(</span><span class="n">my_str1</span> <span class="o">+</span> <span class="n">my_str2</span> <span class="o">+</span> <span class="n">my_str3</span> <span class="o">+</span> <span class="n">my_str4</span><span class="p">)</span>

<span class="c1"># RoofpartywolfiPhone
</span></code></pre></div></div>

<p>Si quieres espacios en blanco entre las cadenas tienes que a√±adirlos <code class="language-plaintext highlighter-rouge">" "</code>:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_str1</span> <span class="o">=</span> <span class="s">'Roof'</span>
<span class="n">my_str2</span> <span class="o">=</span> <span class="s">'party'</span>
<span class="n">my_str3</span> <span class="o">=</span> <span class="s">'wolf'</span>
<span class="n">my_str4</span> <span class="o">=</span> <span class="s">'iPhone'</span>

<span class="k">print</span><span class="p">(</span><span class="n">my_str1</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">my_str2</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">my_str3</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">my_str4</span><span class="p">)</span>

<span class="c1"># Roof party wolf iPhone
</span></code></pre></div></div>

<p><strong>f-strings</strong></p>

<p>Por suerte Python 3 cuenta con el m√©todo string interpolation que facilita mucho el formateo de strings.</p>

<p>Escribe una cadena precedida de la letra <code class="language-plaintext highlighter-rouge">f</code> te permite a√±adir variables dentro de una cadena.</p>

<p>Las variables se escriben entre llaves <code class="language-plaintext highlighter-rouge">{}</code>.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_str1</span> <span class="o">=</span> <span class="s">'Roof'</span>
<span class="n">my_str2</span> <span class="o">=</span> <span class="s">'party'</span>
<span class="n">my_str3</span> <span class="o">=</span> <span class="s">'wolf'</span>
<span class="n">my_str4</span> <span class="o">=</span> <span class="s">'iPhone'</span>

<span class="k">print</span><span class="p">(</span><span class="s">f'</span><span class="si">{</span><span class="n">my_str1</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">my_str2</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">my_str3</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">my_str4</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

<span class="c1"># Roof party wolf iPhone
</span></code></pre></div></div>

<div class="alert alert-info" role="alert">
<p><i class="fas fa-sticky-note"></i> Nota:</p>
 <p>Si como yo est√°s aprendiendo Python pero ya sabes algo de JavaScript, las <code>f-string</code> vendr√≠an a ser a algo as√≠ como los template literals en ES6.</p>
</div>

<p><strong>Ejemplo de template literal en ES6</strong></p>

<p>En JavaScript en vez de preceder la cadena con la letra <code>f</code> utilizamos acentos graves <code>``</code> en lugar de comillas simples <code>''</code> para envolver la cadena. Tambi√©n se requiere del simbolo dolar <code>$</code> delante de las llaves, por lo dem√°s es bastante similar.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">my_str1</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Roof</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">my_str2</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">party</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">my_str3</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">wolf</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">my_str4</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">iPhone</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">my_str1</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">my_str2</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">my_str3</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">my_str4</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>

<span class="c1">// "Roof party wolf iPhone"</span>
</code></pre></div></div>

<p><strong>strings multil√≠nea</strong></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">multiline_str</span> <span class="o">=</span> <span class="s">'''Los strings multil√≠nea
son igual que
los comentarios multil√≠nea...'''</span>

<span class="k">print</span><span class="p">(</span><span class="n">multiline_str</span><span class="p">)</span>

<span class="s">'''
Los strings multil√≠nea
son igual que
los comentarios multil√≠nea...
'''</span>
</code></pre></div></div>

<p>Tambi√©n podemos utilizar el car√°cter de escape <code class="language-plaintext highlighter-rouge">\n</code> para crear saltos de l√≠nea.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">multiline_str</span> <span class="o">=</span> <span class="s">"Los strings multil√≠nea</span><span class="se">\n</span><span class="s">son igual que</span><span class="se">\n</span><span class="s">los comentarios multil√≠nea..."</span>

<span class="k">print</span><span class="p">(</span><span class="n">multiline_str</span><span class="p">)</span>

<span class="s">'''
Los strings multil√≠nea
son igual que
los comentarios multil√≠nea...
'''</span>
</code></pre></div></div>

<p><strong>Indexando strings</strong></p>

<p>Del mismo modo que los √≠tems de lista los car√°cteres de un string son indexables en un √≠ndice que empiza en 0.</p>

<table class="table table-bordered table-responsive-sm table-responsive-md">
  <tbody>
    <tr>
      <td>m</td>
      <td>i</td>
      <td> </td>
      <td>c</td>
      <td>a</td>
      <td>s</td>
      <td>a</td>
      <td> </td>
      <td>T</td>
      <td>e</td>
      <td>l</td>
      <td>√©</td>
      <td>f</td>
      <td>o</td>
      <td>n</td>
      <td>o</td>
    </tr>
      <tr>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      <td>4</td>
      <td>5</td>
      <td>6</td>
      <td>7</td>
      <td>8</td>
      <td>9</td>
      <td>10</td>
      <td>11</td>
      <td>12</td>
      <td>13</td>
      <td>14</td>
      <td>15</td>
    </tr>

  </tbody>
</table>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">et_says</span> <span class="o">=</span> <span class="s">"mi casa tel√©fono"</span>

<span class="k">print</span><span class="p">(</span><span class="n">et_says</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span>



<span class="n">__Funciones</span> <span class="n">de</span> <span class="n">las</span> <span class="n">cadenas__</span>

<span class="o">+</span> <span class="sb">`str.upper()`</span> <span class="n">Convierte</span> <span class="n">el</span> <span class="n">texto</span> <span class="n">en</span> <span class="n">may√∫sculas</span><span class="p">.</span>

<span class="o">+</span> <span class="sb">`str.lower()`</span> <span class="n">convierte</span> <span class="n">el</span> <span class="n">texto</span> <span class="n">e</span> <span class="n">min√∫sculas</span><span class="p">.</span>

<span class="c1">## Trabajando con listas en Python
</span>
<span class="n">Una</span> <span class="n">lista</span> <span class="n">es</span> <span class="n">una</span> <span class="n">secuencia</span> <span class="n">ordenada</span> <span class="n">de</span> <span class="n">elementos</span><span class="p">,</span> <span class="n">las</span> <span class="n">listas</span> <span class="n">no</span> <span class="n">son</span> <span class="n">inmutables</span><span class="p">,</span> <span class="n">podemos</span> <span class="n">a√±adir</span><span class="p">,</span> <span class="n">eliminar</span><span class="p">,</span> <span class="n">mover</span> <span class="n">y</span> <span class="n">cambiar</span> <span class="n">items</span> <span class="n">de</span> <span class="n">lista</span> <span class="n">a</span> <span class="n">nuestro</span> <span class="n">antojo</span><span class="p">.</span>
<span class="n">Las</span> <span class="n">listas</span> <span class="n">se</span> <span class="n">crean</span> <span class="n">a√±adiendo</span> <span class="n">valores</span> <span class="n">entre</span> <span class="sb">`[ ]`</span> <span class="n">corchetes</span><span class="p">.</span>

<span class="sb">``</span><span class="err">`</span><span class="n">py</span>
<span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'chocolate'</span><span class="p">,</span> <span class="s">'lim√≥n'</span><span class="p">,</span> <span class="s">'mango'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">)</span>
<span class="c1"># ['chocolate', 'lim√≥n', 'mango']
</span>
<span class="n">helados</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">'vainilla'</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">)</span>
<span class="c1"># ['chocolate', 'vainilla', 'lim√≥n', 'mango']
</span>
<span class="n">helados</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'pistacho'</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">)</span>
<span class="c1"># ['chocolate', 'vainilla', 'lim√≥n', 'mango', 'pistacho']
</span>
</code></pre></div></div>

<p>Podemos acceder a los valores de lista por su √≠ndice igual que en las cadenas.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'chocolate'</span><span class="p">,</span> <span class="s">'lim√≥n'</span><span class="p">,</span> <span class="s">'mango'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="c1"># mango
</span></code></pre></div></div>

<p>Si no te gusta el mango siempre puedes cambiarlo por fresas silvestres asign√°ndole otro valor a trav√©s de su √≠ndice.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'chocolate'</span><span class="p">,</span> <span class="s">'lim√≥n'</span><span class="p">,</span> <span class="s">'mango'</span><span class="p">]</span>
<span class="n">helados</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s">'fresas silvestres'</span>
<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">)</span>
<span class="c1"># ['chocolate', 'lim√≥n', 'fresas silvestres']
</span></code></pre></div></div>

<p>Si simplemente odias el mango y no quieres a√±adir ning√∫n otro sabor, puedes utilizar el m√©todo  <code class="language-plaintext highlighter-rouge">.remove()</code> para eliminarlo de la lista.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'chocolate'</span><span class="p">,</span> <span class="s">'lim√≥n'</span><span class="p">,</span> <span class="s">'mango'</span><span class="p">]</span>
<span class="n">helados</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">'mango'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">)</span> <span class="c1"># ['chocolate', 'lim√≥n']
</span></code></pre></div></div>

<p>Otro m√©todo que tenemos disponible para eliminar elementos de lista en Python es <code class="language-plaintext highlighter-rouge">.pop()</code>.
Si vienes de JavaScript este m√©todo ya te sonar√°.
<code class="language-plaintext highlighter-rouge">.pop()</code> lo que hace es eliminar el √∫ltimo elemento de la lista pero no solo eso, tambi√©n lo retorna por lo que podemos guardarlo en una variable.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'chocolate'</span><span class="p">,</span> <span class="s">'lim√≥n'</span><span class="p">,</span> <span class="s">'mango'</span><span class="p">]</span>
<span class="n">ultimo_helado</span> <span class="o">=</span> <span class="n">helados</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">ultimo_helado</span><span class="p">)</span> <span class="c1"># mango
</span><span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">)</span> <span class="c1"># ['chocolate', 'lim√≥n']
</span></code></pre></div></div>

<p>Tambi√©n puedes utilizar la palabra clave <code class="language-plaintext highlighter-rouge">del</code> para eliminar elementos de lista.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'chocolate'</span><span class="p">,</span> <span class="s">'lim√≥n'</span><span class="p">,</span> <span class="s">'mango'</span><span class="p">]</span>
<span class="k">del</span> <span class="n">helados</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">)</span> <span class="c1"># ['chocolate', 'lim√≥n']
</span></code></pre></div></div>

<p>Python nos permite crear listas de listas o listas anidadas.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nested_list</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>

<span class="k">print</span><span class="p">(</span><span class="n">nested_list</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># 2
</span>
<span class="k">print</span><span class="p">(</span><span class="n">nested_list</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># 6
</span></code></pre></div></div>

<p>Para acceder al √∫ltimo elemento de la lista utilizamos el indice negativo  <code class="language-plaintext highlighter-rouge">[-1]</code>.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'chocolate'</span><span class="p">,</span> <span class="s">'lim√≥n'</span><span class="p">,</span> <span class="s">'mango'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># mango
</span></code></pre></div></div>

<p>Para saber cuantos elementos tiene una lista utilizamos la funci√≥n predefinida de Python <code class="language-plaintext highlighter-rouge">len</code>.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'chocolate'</span><span class="p">,</span> <span class="s">'lim√≥n'</span><span class="p">,</span> <span class="s">'mango'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">helados</span><span class="p">))</span>  <span class="c1"># 3
</span></code></pre></div></div>

<p>Para saber en que √≠ndice se encuentra un elemento en una lista utilizamos el m√©todo <code class="language-plaintext highlighter-rouge">.index()</code>.</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'chocolate'</span><span class="p">,</span> <span class="s">'lim√≥n'</span><span class="p">,</span> <span class="s">'mango'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="s">'lim√≥n'</span><span class="p">))</span>  <span class="c1"># 1
</span></code></pre></div></div>

<p>El m√©todo <code class="language-plaintext highlighter-rouge">.sort()</code> ordena los √≠tems de lista alfab√©ticamente.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'caf√©'</span><span class="p">,</span> <span class="s">'straciatella'</span><span class="p">,</span> <span class="s">'avellana'</span><span class="p">]</span>
<span class="n">helados</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">)</span>
<span class="c1">#  ['avellana', 'caf√©', 'straciatella']
</span></code></pre></div></div>

<p>El m√©todo <code class="language-plaintext highlighter-rouge">.reverse()</code> invierte los elementos de la lista original.</p>

<p>En el siguiente ejemplo hacemos uso de <code class="language-plaintext highlighter-rouge">.sort()</code> y <code class="language-plaintext highlighter-rouge">.reverse()</code> para ordenar una lista de Z a A.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'caf√©'</span><span class="p">,</span> <span class="s">'straciatella'</span><span class="p">,</span> <span class="s">'avellana'</span><span class="p">]</span>

<span class="n">helados</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">helados</span><span class="p">)</span>
<span class="c1">#  ['straciatella', 'caf√©', 'avellana']
</span></code></pre></div></div>
<h2 id="tuplas">Tuplas</h2>

<h2 id="n√∫meros">N√∫meros</h2>

<p><strong>Enteros</strong> (<code class="language-plaintext highlighter-rouge">int</code>) n√∫meros sin decimales, por ejemplo <code class="language-plaintext highlighter-rouge">500</code> o <code class="language-plaintext highlighter-rouge">-350</code>.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sumar_enteros</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">5</span>
<span class="k">print</span><span class="p">(</span><span class="n">sumar_enteros</span><span class="p">)</span>  <span class="c1"># 10
</span></code></pre></div></div>
<p><strong>N√∫meros con decimales</strong> (<code class="language-plaintext highlighter-rouge">float</code>) por ejemplo <code class="language-plaintext highlighter-rouge">0.20</code> o <code class="language-plaintext highlighter-rouge">-34.000</code>.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sumar_decimales</span> <span class="o">=</span> <span class="mf">5.50</span> <span class="o">+</span> <span class="mf">0.8</span>
<span class="k">print</span><span class="p">(</span><span class="n">sumar_decimales</span><span class="p">)</span>  <span class="c1"># 6.3
</span></code></pre></div></div>
<p><strong>Operadores aritm√©ticos en Python:</strong></p>

<table class="table table-bordered">
  <thead>
    <tr>
      <th scope="col">Operador </th>
      <th scope="col">Descripci√≥n </th>
      <th scope="col">Uso </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">+</th>
      <td>Suma</td>
      <td>5 + 5 = 10 </td>
    </tr>
    <tr>
      <th scope="row">-</th>
      <td>Resta</td>
      <td>4 - 3 = 1</td>
    </tr>
    <tr>
      <th scope="row">*</th>
      <td>Multiplicaci√≥n</td>
      <td>8 * 2 = 16</td>
    </tr>
        <tr>
      <th scope="row">/</th>
      <td>Divisi√≥n</td>
      <td>16 / 2 = 8</td>
    </tr>
    <tr>
      <th scope="row">%</th>
      <td>M√≥dulo</td>
      <td>16 % 3 = 1</td>
    </tr>
    <tr>
      <th scope="row">**</th>
      <td>Exponente</td>
      <td>12 ** 3 = 1728</td>
    </tr>
      <tr>
      <th scope="row">//</th>
      <td>Divisi√≥n entera</td>
      <td>18 // 5 = 3</td>
    </tr>
  </tbody>
</table>

<h2 id="condicionales">Condicionales</h2>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">es_barato</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">es_bueno</span> <span class="o">=</span> <span class="bp">True</span>

<span class="k">if</span> <span class="n">es_barato</span> <span class="ow">and</span> <span class="n">es_bueno</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Toma mi dinero!"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">es_barato</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">es_bueno</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Eres barato pero no eres bueno"</span><span class="p">)</span>
<span class="k">elif</span> <span class="ow">not</span> <span class="n">es_barato</span> <span class="ow">and</span> <span class="n">es_bueno</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Eres bueno pero no eres barato"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Eres una estafa"</span><span class="p">)</span>
</code></pre></div></div>

<p>Con los condicionales en Python puedes construir cosas tan geniales como una peque√±a calculadora.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num1</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Introduce un n√∫mero: "</span><span class="p">))</span>
<span class="n">op</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Introduce un operador: "</span><span class="p">)</span>
<span class="n">num2</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Introduce el segundo n√∫mero: "</span><span class="p">))</span>

<span class="k">if</span> <span class="n">op</span> <span class="o">==</span> <span class="s">'+'</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">num1</span> <span class="o">+</span> <span class="n">num2</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">op</span> <span class="o">==</span> <span class="s">'-'</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">num1</span> <span class="o">-</span> <span class="n">num2</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">op</span> <span class="o">==</span> <span class="s">'/'</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">num1</span> <span class="o">/</span> <span class="n">num2</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">op</span> <span class="o">==</span> <span class="s">'*'</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">num1</span> <span class="o">*</span> <span class="n">num2</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Introduce un operador v√°lido'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="iteraciones-en-python">Iteraciones en Python</h2>

<ul>
  <li>While</li>
  <li>For</li>
</ul>

<h2 id="funciones-en-python">Funciones en Python</h2>

<p>Las funciones en Python se crean mediante la instrucci√≥n <code class="language-plaintext highlighter-rouge">def</code> m√°s el nombre de la funci√≥n.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_function</span><span class="p">(</span><span class="n">param1</span><span class="p">,</span> <span class="n">param2</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">param1</span> <span class="o">+</span> <span class="n">param2</span><span class="p">)</span>
</code></pre></div></div>

<p>Para invocar la funci√≥n escribimos el nombre de la funci√≥n m√°s par√©ntesis y los par√°metros de la funci√≥n si los tiene.
No todas las funciones tienen que tener par√°metros.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_function</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="c1"># 10
</span></code></pre></div></div>
<h2 id="funciones-lambda">Funciones lambda</h2>

<p>Las funciones normales en Python se definen con <code class="language-plaintext highlighter-rouge">def</code>.
Las funciones anonimas en Python se definen con <code class="language-plaintext highlighter-rouge">lambda</code>.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Funci√≥n normal
</span><span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="n">z</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">print</span><span class="p">(</span><span class="n">myfunc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1"># 9
</span></code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Funci√≥n lambda
</span><span class="n">result2</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="n">z</span>

<span class="k">print</span><span class="p">(</span><span class="n">result2</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1"># 9
</span></code></pre></div></div>

<h2 id="diccionarios">Diccionarios</h2>

<h2 id="clases-y-objetos">Clases y objetos</h2>
:ET