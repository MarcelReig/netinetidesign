I"ú<h3 class="lead my-5" id="las-listas-por-comprensi√≥n-del-ingl√©s-list-comrehension-son-una-manera-elegante-de-de-definir-y-crear-listas-basadas-en-listas-existentes">Las listas por comprensi√≥n del ingl√©s <code class="language-plaintext highlighter-rouge">List Comrehension</code> son una manera elegante de de definir y crear listas basadas en listas existentes.</h3>

<p>Veamos como crear√≠amos una lista con los cuadrados de los n√∫meros del 1 al 10 con un bucle for:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">squares</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">):</span>
    <span class="n">squares</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
    
<span class="k">print</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>

<span class="c1">#Output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</span></code></pre></div></div>

<p>Ahora veamos como crear√≠amos la misma lista de una forma m√°s elegante y en una sola l√≠nea utilizando la sintaxis de comprensi√≥n de listas:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)]</span>

<span class="k">print</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
<span class="c1">#Output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</span></code></pre></div></div>

<p>Supongamos que tenemos una lista de pa√≠ses</p>
:ET