I"±!<h3 class="lead" id="python-es-un-lenguaje-de-prop√≥sito-general-con-una-sintaxis-limpia-y-sencilla-por-lo-que-es-una-buena-elecci√≥n-para-aprender-a-programar">Python es un lenguaje de prop√≥sito general con una sintaxis limpia y sencilla, por lo que es una buena elecci√≥n para aprender a programar.</h3>

<h3 class="lead" id="python-fue-creado-en-los-90-por-guido-van-rossum-su-nombre-viene-de-los-humoristas-britanicos-monty-python">Python fue creado en los 90 por <a href="https://twitter.com/gvanrossum?s=20" target="\_blank">Guido van Rossum</a>, su nombre viene de los humoristas britanicos Monty Python.</h3>

<h3 class="lead my-5" id="as√≠-como-rubi-cuenta-con-los-framaworks-rails-y-sinatra-en-python-tienes--django-y-flask-para-crear-aplicaciones-web">As√≠ como Rubi cuenta con los framaworks Rails y Sinatra, en Python tienes  <a href="https://www.djangoproject.com/" target="\_blank">django</a> y <a href="https://flask.palletsprojects.com/en/2.0.x/" target="\_blank">Flask</a> para crear aplicaciones web.</h3>

<h2 id="empezar-a-programar-en-python">Empezar a programar en Python</h2>

<h3 id="sin-instalaci√≥n">Sin instalaci√≥n</h3>

<p>La manera m√°s f√°cil de probar el lenguaje es utilizar <a href="https://replit.com/" target="\_blank">replit</a> o <a href="https://www.anyfiddle.com/">anyfidle</a>, son herramientas tipo codepen pero que te permiten programar en Python.</p>

<div class="browser">
<img src="/assets/images/blog/replit.jpeg" width="800" class="browser img-fluid text-center m-xl-auto my-5" alt="replit" />


### Con instalaci√≥n

Las herraminetas mencionadas anteriormente est√°n bi√©n para probar el lenguaje, pero si quieres hacer algo serio, tarde o temprano tendr√°s que instalar Python en tu computadora.

Para instalar Python ves a [python.org](https://www.python.org/){:target="\_blank"} y descarga la versi√≥n de Python para tu sistema operativo.

<div class="alert alert-info" role="alert">
<p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>Para instalar Python en Mac te recomiendo seguir el <a href="https://www.freecodecamp.org/news/python-version-on-mac-update/" target="_blank">tutorial de Quincy Larson</a> en freeCodeCamp.</p>
</div>

Una vez instalado Python en tu computadora ya puedes abrir la terminal y escribir `python3`, esto te abrir√° un interprete de Python en el que ya puedes empezar a ejecutar funciones de Python.

<img src="/assets/images/blog/python-term.png" width="800" class="img-fluid text-center m-xl-auto" alt="python" />

<div class="alert alert-info" role="alert">
 <p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>Una vez instalado Python 3 ya puedes escribir comandos de Python detr√°s de los tres s√≠mbolos <code>&gt;&gt;&gt;</code><br />Si quieres c√≥digo coloreado y que te avise de errores instala un editor de c√≥digo.</p>
</div>

## Entorno de programaci√≥n en Python

No necesitas un IDE especializado para empezar a programar en Python, cualquier editor de c√≥digo actual te ir√° bien.

En la fase en la que me encuentro, de aprender y experimentar con el lenguaje, [PyCharm](https://www.jetbrains.com/es-es/pycharm/download/){:target="\_blank"} me resulta muy c√≥modo, la versi√≥n **Community** es gratuita y para empezar es m√°s que suficiente.

En alg√∫n momento probar√© la [extensi√≥n para Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python){:target="\_blank"} de  [Visual Studio Code](https://code.visualstudio.com/){:target="\_blank"} que es el editor que utilizo para escribir estas l√≠neas.

## Caracter√≠sticas principales del lenguaje

- Es un **lenguaje interpretado**, no compilado.
- Usa **tipado din√°mico**, una variable puede tomar valores de distinto tipo.
- Es **fuertemente tipado**, el tipo no cambia de manera repentina. Para que se produzca un cambio de tipo se tiene que hacer una conversi√≥n expl√≠cita.
- Es **multiplataforma**, el mismo c√≥digo funciona en macOS, Windows y Linux.

## Indentaci√≥n

Python utiliza la indentaci√≥n para indicar el inicio y f√≠n de un bloque de c√≥digo.

```py
def saludar(first_name, last_name):
    return("Hi " + first_name + " " + last_name + "!") # c√≥digo indentado
print(saludar("Ana", "Toledo"))
```

## Comentarios
Comentario de una l√≠nea.

```py
# Hola soy un comentario
```

Los comentarios de varias l√≠neas se hacen con 3 comillas dobles o simples al inicio y al final del comentario.

```py
"""
Comentario
de varias
l√≠neas
"""
```

<div class="alert alert-info" role="alert">
 <p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>En los siguientes ejemplos utilizar√© <code># Comentarios de Python</code> para mostrar el resultado de la consola u otras aclaraciones.</p>
</div>

## Variables en Python

Las variables nos permiten guardar valores que m√°s tarde podemos utilizar en nuestro c√≥digo.
Las variables pueden guardar cualquier tipo de dato, enteros, flotantes, booleanos y cadenas o Strings, tambi√©n podemos guardar listas y tuplas.

```py
# variable que contiene un string
mascota = "Perro"
# variable que contiene un booleano
raza_peligrosa = True
# variable que contiene un n√∫mero entero
edad = 2
```

## Tipos de datos en Python

- Booleanos _(bool)_
- N√∫meros _(int)_
- N√∫meros decimales _(float)_
- N√∫mero complejo _(complex)_
- Cadenas _(String)_
- Listas _(List)_
- Tuplas _(Tuple)_
- Diccionarios _(Dict)_
- set _(set)_

<div class="alert alert-info" role="alert">
 <p><i class="fas fa-sticky-note"></i> Nota:</p>
<p>En Python existen dos tipos de datos los que se pueden modificar tras su creaci√≥n <b>Mutables</b> y los que no, <b>Inmutables</b>.</p>
</div>

__Mutables__ Se pueden modificar tras su creaci√≥n.
- Listas
- Dicionarios
- Sets

__Inmutables__ No se pueden modificar tras su creaci√≥n.
- Booleanos
- N√∫meros
- Cadenas
- Tuplas

## N√∫meros en Python

**Enteros** (`int`) n√∫meros sin decimales, por ejemplo `500` o `-350`.

```py
sumar_enteros = 5 + 5
print(sumar_enteros)  # Output: 10
```
**N√∫meros con decimales** (`float`) por ejemplo `0.20` o `-34.000`.

```py
sumar_decimales = 5.50 + 0.8
print(sumar_decimales)  # Output: 6.3
```
__Operadores aritm√©ticos en Python:__

<table class="table table-bordered">
  <thead>
    <tr>
      <th scope="col">Operador </th>
      <th scope="col">Descripci√≥n </th>
      <th scope="col">Uso </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">+</th>
      <td>Suma</td>
      <td>5 + 5 = 10 </td>
    </tr>
    <tr>
      <th scope="row">-</th>
      <td>Resta</td>
      <td>4 - 3 = 1</td>
    </tr>
    <tr>
      <th scope="row">*</th>
      <td>Multiplicaci√≥n</td>
      <td>8 * 2 = 16</td>
    </tr>
        <tr>
      <th scope="row">/</th>
      <td>Divisi√≥n</td>
      <td>16 / 2 = 8</td>
    </tr>
    <tr>
      <th scope="row">%</th>
      <td>M√≥dulo</td>
      <td>16 % 3 = 1</td>
    </tr>
    <tr>
      <th scope="row">**</th>
      <td>Exponente</td>
      <td>12 ** 3 = 1728</td>
    </tr>
      <tr>
      <th scope="row">//</th>
      <td>Divisi√≥n entera</td>
      <td>18 // 5 = 3</td>
    </tr>
  </tbody>
</table>

## Condicionales

```py
es_barato = True
es_bueno = True

if es_barato and es_bueno:
    print("Toma mi dinero!")
elif es_barato and not es_bueno:
    print("Eres barato pero no eres bueno")
elif not es_barato and es_bueno:
    print("Eres bueno pero no eres barato")
else:
    print("Eres una estafa")
```

Con los condicionales en Python puedes construir cosas tan geniales como una peque√±a calculadora.

```py
num1 = float(input("Introduce un n√∫mero: "))
op = input("Introduce un operador: ")
num2 = float(input("Introduce el segundo n√∫mero: "))

if op == '+':
    print(num1 + num2)
elif op == '-':
    print(num1 - num2)
elif op == '/':
    print(num1 / num2)
elif op == '*':
    print(num1 * num2)
else:
    print('Introduce un operador v√°lido')
```

## Iteraciones o loops en Python

Se utilizan para automatizar tareas repetitivas.

Veamos un ejemplo de un bucle `while` que 

```py
n = 5
while n &gt; 0:
    print(n)
    n = n -1
print('Lets go!')

# Output: 
'''
5
4
3
2
1
Lets go!
'''
```

- For

### Funciones en Python

Las funciones en Python se crean mediante la instrucci√≥n `def` m√°s el nombre de la funci√≥n.
Para invocar la funci√≥n escribimos el nombre de la funci√≥n m√°s par√©ntesis y los par√°metros de la funci√≥n si los tiene.
No todas las funciones tienen que tener par√°metros.

```py
def myfunc(x, y, z):
    result = x + y + z
    return result

print(myfunc(2, 4, 3)) # Output: 9
```

### Funciones lambda

Las funciones anonimas en Python se definen con `lambda`.

```py
result2 = lambda x, y, z: x + y + z

print(result2(2, 4, 3)) # Output: 9
```

</div>
:ET