I"≤<h3 class="lead mt-5" id="en-python-utilizan-los-iteradores-constantemente-lo-loops-te-permiten-recorrer-estructuras-de-datos-sin-saber-lo-largas-que-son">En Python utilizan los iteradores constantemente, lo loops te permiten recorrer estructuras de datos sin saber lo largas que son.</h3>

<h3 class="lead mb-5" id="para-aprender-a-utilizar-los-loops-primero-neceitamos-una-lista-de-datos-sobre-la-que-iterar-la-lista-de-tags-que-me-aparece-en-youtube-servir√°-para-el-ejemplo">Para aprender a utilizar los loops primero neceitamos una lista de datos sobre la que iterar, la lista de tags que me aparece en Youtube servir√° para el ejemplo.</h3>

<p>## 
Satyabrata Pal
October 18th, 2017
PYTHON
Python Loops Tutorial
A comprehensive introductory tutorial to Python loops. Learn and practice while and for loops, nested loops, the break and continue keywords, the range function and more!
range Python</p>

<p>Loops are important in Python or in any other programming language as they help you to execute a block of code repeatedly. You will often come face to face with situations where you would need to use a piece of code over and over but you don‚Äôt want to write the same line of code multiple times.</p>

<p>In this Python loops tutorial you will cover the following topics :</p>

<p>The Python while loop: you‚Äôll learn how you can construct and use a while loop in data science applications. You‚Äôll do this by going over some interactive coding challenges.
Next, you‚Äôll move on to the for loop: once again, you‚Äôll learn how you can construct and use a for loop in a real-life context.
You‚Äôll also learn the difference between using a while loop and a for loop.
Also the topic of nested loops
After, you‚Äôll see how you can use the break and continue keywords.
The difference between the xrange() and range() functions</p>

<p>While Loop
The while loop is one of the first loops that you‚Äôll probably encounter when you‚Äôre starting to learn how to program. It is arguably also one of the most intuitive ones to understand: if you think of the name of this loop, you will quickly understand that the word ‚Äúwhile‚Äù has got to do something with ‚Äúinterval‚Äù or a ‚Äúperiod of time‚Äù. As you already know by now, the word ‚Äúloop‚Äù refers to a piece of code that you execute repeatedly.</p>

<p>With all of this in mind, you can easily understand the following definition of the while loop:</p>

<p>A while loop is a programming concept that, when it‚Äôs implemented, executes a piece of code over and over again while a given condition still holds true.</p>

<p>The above definition also highlights the three components that you need to construct the while loop in Python:</p>

<p>The while keyword;
A condition that transates to either True or False; And
A block of code that you want to execute repeatedly
That‚Äôs all it takes!</p>

<p>How To Make A While Loop in Python
Now that you know what you need to construct a while loop, all that is left to do now is to look at a real-life example where the while loop is used before you start making exercises on your own! Consider the following example:</p>

<h1 id="take-user-input">Take user input</h1>
<p>number = 2</p>

<h1 id="condition-of-the-while-loop">Condition of the while loop</h1>
<p>while number &lt; 5 :<br />
    print(‚ÄúThank you‚Äù)
    # Increment the value of the variable ‚Äúnumber by 1‚Äù
    number = number+1
Thank you
Thank you
Thank you
The code example above is a very simple while loop: if you think about it, the three components about which you read before are all present: the while keyword, followed by a condition that translates to either True or False (number &lt; 5) and a block of code that you want to execute repeatedly:</p>

<p>print(‚ÄúThank you‚Äù)
number = number + 1
If you go into detail in the above code, you see that there is a variable number in which you store an integer 2. Since the value in number is smaller than 5, you print out ‚ÄúThank you‚Äù and increase the value of number with one. While the value in number stays smaller than 5, you continue to execute the two lines of code that are contained within the while loop:</p>

<p>‚ÄúThank you‚Äù
‚ÄúThank you‚Äù
You print out ‚ÄúThank you‚Äù two more times before the value of number is equal to 5 and the condition doesn‚Äôt evaluate to True any more. Because the condition now evaluates to False, you will exit the while loop and continue your program if it contains any more code. In this case, there isn‚Äôt any more code so your program will stop.</p>

<p>The above example is a bit basic, you can also include conditionals, or, in other words, an if condition, to make it even more customized. Take a look at the following example:</p>

<h1 id="take-user-input-1">Take user input</h1>
<p>number = 2</p>

<h1 id="condition-of-the-while-loop-1">Condition of the while loop</h1>
<p>while number &lt; 5 :<br />
    # Find the mod of 2
    if number%2 == 0:<br />
        print(‚ÄúThe number ‚Äú+str(number)+‚Äù is even‚Äù)
    else:
        print(‚ÄúThe number ‚Äú+str(number)+‚Äù is odd‚Äù)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Increment `number` by 1
number = number+1 The number 2 is even The number 3 is odd The number 4 is even Now, let's practice!
</code></pre></div></div>

<p>Write a function collatz() which lets the user input an integer in a variable named number. If number is even, then it should print the result of number/2. If number is odd, then collatz() should print and return 3 * number + 1. The program should keep calling the function collatz() on the number until it returns a 1.</p>

<p>Note that this is actually an implementation of collatz sequence, which in short is a mathematical problem where you choose a number and you keep doing the above calculations until you arrive at a result of 1.</p>

<p>Below, you can find the solution:</p>

<p>def collatz(number):
    # Is the mod of 2 equal to 0?
    if number % 2 == 0:
        print(number // 2)
        return number // 2</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># If the mod of 2 isn't equal to 0, print `3 * number + 1`
elif number % 2 == 1:
    result = 3 * number + 1
    print(result)
    return result
</code></pre></div></div>

<h1 id="ask-input-from-the-user">Ask input from the user</h1>
<p>n = input(‚ÄúGive me a number: ‚Äú)</p>

<h1 id="as-long-as-n-is-not-equal-to-1-run-collatz">As long as <code class="language-plaintext highlighter-rouge">n</code> is not equal to <code class="language-plaintext highlighter-rouge">1</code>, run <code class="language-plaintext highlighter-rouge">collatz()</code></h1>
<p>while n != 1:
    n = collatz(int(n))
Give me a number: 5
16
8
4
2
1</p>

<p>For Loop</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tags</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Live'</span><span class="p">,</span> <span class="s">'Japanese Music'</span><span class="p">,</span> <span class="s">'Lo-fi Music'</span><span class="p">,</span> <span class="s">'New to you'</span><span class="p">]</span>
<span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">tags</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">tag</span><span class="p">)</span>

<span class="c1"># Output:
</span><span class="s">'''
Live
Japanese Music
Lo-fi Music
New to you
'''</span>
</code></pre></div></div>
:ET